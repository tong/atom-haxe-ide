// Generated by Haxe 4.0.0
(function ($hx_exports) { "use strict";
$hx_exports["xxx"] = $hx_exports["xxx"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var atom_CompositeDisposable = require("atom").CompositeDisposable;
var atom_Emitter = require("atom").Emitter;
var atom_File = require("atom").File;
var atom_Point = require("atom").Point;
var atom_Range = require("atom").Range;
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
};
var haxe_io_Bytes = function() { };
haxe_io_Bytes.__name__ = true;
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe_io_Path.__name__ = true;
haxe_io_Path.withoutExtension = function(path) {
	var s = new haxe_io_Path(path);
	s.ext = null;
	return s.toString();
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_node_ChildProcess = require("child_process");
var js_node_Fs = require("fs");
var js_node_Path = require("path");
var js_node_buffer_Buffer = require("buffer").Buffer;
var om_haxe_ErrorMessage = function() {
};
om_haxe_ErrorMessage.__name__ = true;
om_haxe_ErrorMessage.parse = function(str) {
	if(om_haxe_ErrorMessage.PATTERN.match(str)) {
		var e = new om_haxe_ErrorMessage();
		e.path = om_haxe_ErrorMessage.PATTERN.matched(1);
		e.line = Std.parseInt(om_haxe_ErrorMessage.PATTERN.matched(2));
		var posType = om_haxe_ErrorMessage.PATTERN.matched(3);
		switch(posType) {
		case "character":
			e.character = Std.parseInt(om_haxe_ErrorMessage.PATTERN.matched(4));
			e.content = om_haxe_ErrorMessage.PATTERN.matched(7);
			break;
		case "characters":
			e.characters = { start : Std.parseInt(om_haxe_ErrorMessage.PATTERN.matched(4)), end : Std.parseInt(om_haxe_ErrorMessage.PATTERN.matched(6))};
			e.content = om_haxe_ErrorMessage.PATTERN.matched(7);
			break;
		case "lines":
			e.lines = { start : Std.parseInt(om_haxe_ErrorMessage.PATTERN.matched(4)), end : Std.parseInt(om_haxe_ErrorMessage.PATTERN.matched(6))};
			e.content = om_haxe_ErrorMessage.PATTERN.matched(7);
			break;
		}
		return e;
	}
	return null;
};
var om_haxe_LanguageServer = function(haxePath,verbose) {
	if(verbose == null) {
		verbose = true;
	}
	if(haxePath == null) {
		haxePath = "haxe";
	}
	this.haxePath = haxePath;
	this.verbose = verbose;
};
om_haxe_LanguageServer.__name__ = true;
om_haxe_LanguageServer.prototype = {
	start: function(callback) {
		this.stop();
		this.buffer = new om_haxe__$LanguageServer_MessageBuffer();
		this.nextMessageLength = -1;
		var args = ["-v","--wait","stdio"];
		this.process = js_node_ChildProcess.spawn(this.haxePath,args);
		this.process.on("exit",$bind(this,this.handleExit));
		this.process.stderr.on("data",$bind(this,this.handleData));
		this.process.stdout.on("data",function(buf) {
			window.console.debug("%c" + buf.toString(),"color:#EA8220;");
		});
		this.getVersion(function(v) {
			var version = thx_semver__$Version_Version_$Impl_$.stringToVersion(v);
			var tmp = thx_semver__$Version_Version_$Impl_$.lessThan(version,thx_semver__$Version_Version_$Impl_$.stringToVersion("3.3.0")) ? "haxe >= 3.3.0 required" : null;
			callback(tmp);
		});
	}
	,stop: function() {
		if(this.process != null) {
			this.process.removeAllListeners();
			try {
				this.process.kill();
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				console.log(e);
			}
			this.process = null;
		}
		var req = this.requestsHead;
		while(req != null) {
			req.processResult(null);
			req = req.next;
		}
		this.requestsHead = this.requestsTail = this.currentRequest = null;
	}
	,getVersion: function(callback) {
		this.query(["-version"],null,callback,function(e) {
			console.log(e);
		});
	}
	,query: function(args,stdin,onResult,onError,onMessage) {
		var req = new om_haxe__$LanguageServer_Request(args,stdin,onResult,onError,onMessage);
		if(this.requestsHead == null) {
			this.requestsHead = this.requestsTail = req;
		} else {
			this.requestsTail.next = req;
			req.prev = this.requestsTail;
			this.requestsTail = req;
		}
		this.checkQueue();
	}
	,checkQueue: function() {
		if(this.currentRequest != null) {
			return;
		}
		if(this.requestsHead != null) {
			this.currentRequest = this.requestsHead;
			this.requestsHead = this.currentRequest.next;
			this.process.stdin.write(this.currentRequest.prepareBody());
		}
	}
	,handleData: function(buf) {
		this.buffer.append(buf);
		while(true) {
			if(this.nextMessageLength == -1) {
				var length = this.buffer.tryReadLength();
				if(length == -1) {
					return;
				}
				this.nextMessageLength = length;
			}
			var msg = this.buffer.tryReadContent(this.nextMessageLength);
			if(msg == null) {
				return;
			}
			this.nextMessageLength = -1;
			if(this.currentRequest != null) {
				var request = this.currentRequest;
				this.currentRequest = null;
				request.processResult(msg);
				this.checkQueue();
			}
		}
	}
	,handleExit: function(a,b) {
		console.log("Haxe process was killed");
		console.log(a);
		console.log(b);
	}
};
var om_haxe__$LanguageServer_MessageBuffer = function(size) {
	if(size == null) {
		size = 8192;
	}
	this.size = size;
	this.buffer = new js_node_buffer_Buffer(size);
	this.index = 0;
};
om_haxe__$LanguageServer_MessageBuffer.__name__ = true;
om_haxe__$LanguageServer_MessageBuffer.prototype = {
	append: function(chunk) {
		if(this.buffer.length - this.index >= chunk.length) {
			chunk.copy(this.buffer,this.index,0,chunk.length);
		} else {
			var nsize = (Math.ceil((this.index + chunk.length) / this.size) + 1) * this.size | 0;
			if(this.index == 0) {
				this.buffer = new js_node_buffer_Buffer(nsize);
				chunk.copy(this.buffer,0,0,chunk.length);
			} else {
				this.buffer = js_node_buffer_Buffer.concat([this.buffer.slice(0,this.index),chunk],nsize);
			}
		}
		this.index += chunk.length;
	}
	,tryReadLength: function() {
		if(this.index < 4) {
			return -1;
		}
		var len = this.buffer.readInt32LE(0);
		this.buffer = this.buffer.slice(4);
		this.index -= 4;
		return len;
	}
	,tryReadContent: function(length) {
		if(this.index < length) {
			return null;
		}
		var res = this.buffer.toString("utf-8",0,length);
		var nstart = length;
		this.buffer.copy(this.buffer,0,nstart);
		this.index -= nstart;
		return res;
	}
};
var om_haxe__$LanguageServer_Request = function(args,stdin,onResult,onError,onMessage) {
	this.args = args;
	this.stdin = stdin;
	this.onResult = onResult;
	this.onError = onError;
	this.onMessage = onMessage;
};
om_haxe__$LanguageServer_Request.__name__ = true;
om_haxe__$LanguageServer_Request.prototype = {
	prepareBody: function() {
		if(this.stdin != null) {
			this.args = this.args.concat(["-D","display-stdin"]);
		}
		var lbuf = new js_node_buffer_Buffer(4);
		var chunks = [lbuf];
		var length = 0;
		var _g = 0;
		var _g1 = this.args;
		while(_g < _g1.length) {
			var arg = _g1[_g];
			++_g;
			var buf = new js_node_buffer_Buffer("" + arg + "\n");
			chunks.push(buf);
			length += buf.length;
		}
		if(this.stdin != null) {
			var sbuf = new js_node_buffer_Buffer([1]);
			chunks.push(sbuf);
			var buf1 = new js_node_buffer_Buffer(this.stdin);
			chunks.push(buf1);
			length += buf1.length + sbuf.length;
		}
		lbuf.writeInt32LE(length,0);
		return js_node_buffer_Buffer.concat(chunks,length + 4);
	}
	,processResult: function(data) {
		if(data == null) {
			this.onResult(null);
			return;
		}
		var buf_b = "";
		var hasError = false;
		var _g = 0;
		var _g1 = data.split("\n");
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			var _g2 = line.charCodeAt(0);
			switch(_g2) {
			case 1:
				var line1 = StringTools.replace(line.substring(1),"\x01","\n");
				if(this.onMessage != null) {
					this.onMessage(line1);
				}
				break;
			case 2:
				hasError = true;
				break;
			default:
				buf_b += line == null ? "null" : "" + line;
				buf_b += "\n";
			}
		}
		var data1 = StringTools.trim(buf_b);
		if(hasError) {
			this.onError(data1);
		} else {
			this.onResult(data1);
		}
	}
};
var thx_semver__$Version_Version_$Impl_$ = {};
thx_semver__$Version_Version_$Impl_$.__name__ = true;
thx_semver__$Version_Version_$Impl_$.stringToVersion = function(s) {
	if(!thx_semver__$Version_Version_$Impl_$.VERSION.match(s)) {
		throw new js__$Boot_HaxeError("Invalid SemVer format for \"" + s + "\"");
	}
	var major = Std.parseInt(thx_semver__$Version_Version_$Impl_$.VERSION.matched(1));
	var minor = Std.parseInt(thx_semver__$Version_Version_$Impl_$.VERSION.matched(2));
	var patch = Std.parseInt(thx_semver__$Version_Version_$Impl_$.VERSION.matched(3));
	var pre = thx_semver__$Version_Version_$Impl_$.parseIdentifiers(thx_semver__$Version_Version_$Impl_$.VERSION.matched(4));
	var build = thx_semver__$Version_Version_$Impl_$.parseIdentifiers(thx_semver__$Version_Version_$Impl_$.VERSION.matched(5));
	var this1 = { version : [major,minor,patch], pre : pre, build : build};
	return this1;
};
thx_semver__$Version_Version_$Impl_$.equals = function(this1,other) {
	if(this1.version[0] != other.version[0] || this1.version[1] != other.version[1] || this1.version[2] != other.version[2]) {
		return false;
	}
	return thx_semver__$Version_Version_$Impl_$.equalsIdentifiers(this1.pre,other.pre);
};
thx_semver__$Version_Version_$Impl_$.greaterThan = function(this1,other) {
	if(this1.pre.length > 0 && other.pre.length > 0) {
		if(this1.version[0] == other.version[0] && this1.version[1] == other.version[1] && this1.version[2] == other.version[2]) {
			return thx_semver__$Version_Version_$Impl_$.greaterThanIdentifiers(this1.pre,other.pre);
		} else {
			return false;
		}
	} else if(other.pre.length > 0) {
		if(this1.version[0] != other.version[0]) {
			return this1.version[0] > other.version[0];
		}
		if(this1.version[1] != other.version[1]) {
			return this1.version[1] > other.version[1];
		}
		if(this1.version[2] != other.version[2]) {
			return this1.version[2] > other.version[2];
		}
		if(this1.pre.length > 0) {
			return thx_semver__$Version_Version_$Impl_$.greaterThanIdentifiers(this1.pre,other.pre);
		} else {
			return true;
		}
	} else if(this1.pre.length <= 0) {
		if(this1.version[0] != other.version[0]) {
			return this1.version[0] > other.version[0];
		}
		if(this1.version[1] != other.version[1]) {
			return this1.version[1] > other.version[1];
		}
		if(this1.version[2] != other.version[2]) {
			return this1.version[2] > other.version[2];
		}
		return thx_semver__$Version_Version_$Impl_$.greaterThanIdentifiers(this1.pre,other.pre);
	} else {
		return false;
	}
};
thx_semver__$Version_Version_$Impl_$.greaterThanOrEqual = function(this1,other) {
	if(!thx_semver__$Version_Version_$Impl_$.equals(this1,other)) {
		return thx_semver__$Version_Version_$Impl_$.greaterThan(this1,other);
	} else {
		return true;
	}
};
thx_semver__$Version_Version_$Impl_$.lessThan = function(this1,other) {
	return !thx_semver__$Version_Version_$Impl_$.greaterThanOrEqual(this1,other);
};
thx_semver__$Version_Version_$Impl_$.parseIdentifiers = function(s) {
	return (null == s ? "" : s).split(".").map(thx_semver__$Version_Version_$Impl_$.sanitize).filter(function(s1) {
		return s1 != "";
	}).map(thx_semver__$Version_Version_$Impl_$.parseIdentifier);
};
thx_semver__$Version_Version_$Impl_$.parseIdentifier = function(s) {
	var i = Std.parseInt(s);
	if(null == i) {
		return thx_semver_Identifier.StringId(s);
	} else {
		return thx_semver_Identifier.IntId(i);
	}
};
thx_semver__$Version_Version_$Impl_$.equalsIdentifiers = function(a,b) {
	if(a.length != b.length) {
		return false;
	}
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		var _g2 = b[i];
		var _g3 = a[i];
		switch(_g3[1]) {
		case 0:
			if(_g2[1] == 0) {
				var a1 = _g3[2];
				var b1 = _g2[2];
				if(a1 != b1) {
					return false;
				}
			}
			break;
		case 1:
			if(_g2[1] == 1) {
				var a2 = _g3[2];
				var b2 = _g2[2];
				if(a2 != b2) {
					return false;
				}
			}
			break;
		default:
		}
	}
	return true;
};
thx_semver__$Version_Version_$Impl_$.greaterThanIdentifiers = function(a,b) {
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		var _g2 = b[i];
		var _g3 = a[i];
		switch(_g3[1]) {
		case 0:
			switch(_g2[1]) {
			case 0:
				var a1 = _g3[2];
				var b1 = _g2[2];
				if(a1 == b1) {
					continue;
				} else {
					var a2 = _g3[2];
					var b2 = _g2[2];
					if(a2 > b2) {
						return true;
					} else {
						return false;
					}
				}
				break;
			case 1:
				return true;
			default:
				return false;
			}
			break;
		case 1:
			if(_g2[1] == 1) {
				var a3 = _g3[2];
				var b3 = _g2[2];
				if(a3 == b3) {
					continue;
				} else {
					var a4 = _g3[2];
					var b4 = _g2[2];
					if(a4 > b4) {
						return true;
					} else {
						return false;
					}
				}
			} else {
				return false;
			}
			break;
		default:
			return false;
		}
	}
	return false;
};
thx_semver__$Version_Version_$Impl_$.sanitize = function(s) {
	return s.replace(thx_semver__$Version_Version_$Impl_$.SANITIZER.r,"");
};
var thx_semver_Identifier = { __ename__ : true, __constructs__ : ["StringId","IntId"] };
thx_semver_Identifier.StringId = function(value) { var $x = ["StringId",0,value]; $x.__enum__ = thx_semver_Identifier; $x.toString = $estr; return $x; };
thx_semver_Identifier.IntId = function(value) { var $x = ["IntId",1,value]; $x.__enum__ = thx_semver_Identifier; $x.toString = $estr; return $x; };
var xxx_AutoCompleteProvider = function() {
	this.excludeLowerPriority = false;
	this.inclusionPriority = 2;
	this.disableForSelector = ".source.haxe .comment, .source.hx .comment";
	this.selector = ".source.haxe, .source.hx";
};
xxx_AutoCompleteProvider.__name__ = true;
xxx_AutoCompleteProvider.prototype = {
	dispose: function() {
	}
	,getSuggestions: function(req) {
		return new Promise(function(resolve,reject) {
			resolve([]);
			return;
		});
	}
};
var xxx_Build = function(hxml) {
	atom_Emitter.call(this);
	this.hxml = hxml;
};
xxx_Build.__name__ = true;
xxx_Build.__super__ = atom_Emitter;
xxx_Build.prototype = $extend(atom_Emitter.prototype,{
	start: function(verbose) {
		if(verbose == null) {
			verbose = false;
		}
		var _gthis = this;
		var parent = this.hxml.getParent();
		var cwd = parent.getPath();
		this.args = ["--cwd",cwd];
		if(verbose) {
			this.args.push("-v");
		}
		this.args.push(this.hxml.getBaseName());
		xxx_IDE.server.query(this.args,null,function(res) {
			console.log(res);
			_gthis.emit("end",0);
		},function(err) {
			var tmp = StringTools.trim(err);
			_gthis.emit("error",tmp);
			_gthis.emit("end",null);
		},function(msg) {
			_gthis.emit("message",msg);
		});
		this.emit("start",null);
	}
});
var xxx_IDE = $hx_exports["xxx"]["IDE"] = function() { };
xxx_IDE.__name__ = true;
xxx_IDE.activate = function(state) {
	console.log("Atom-xxx");
	xxx_IDE.disposables = new atom_CompositeDisposable();
	xxx_IDE.emitter = new atom_Emitter();
	xxx_IDE.statusbar = new xxx_view_StatusbarView();
	xxx_IDE.server = new om_haxe_LanguageServer(atom.config.get("xxx." + "haxe_path"));
	haxe_Timer.delay(function() {
		xxx_IDE.server.start(function(err) {
			if(err != null) {
				atom.notifications.addWarning(err);
			} else {
				xxx_IDE.disposables.add(atom.commands.add("atom-workspace","xxx:build",function(e) {
					var treeViewFile = xxx_IDE.getTreeViewFile();
					if(treeViewFile != null && haxe_io_Path.extension(treeViewFile) == "hxml") {
						if(xxx_IDE.hxml != null && treeViewFile != xxx_IDE.hxml.getPath()) {
							xxx_IDE.selectHxml(treeViewFile);
						}
					}
					xxx_IDE.build();
				}));
			}
		});
	},atom.config.get("xxx." + "haxe_server_startdelay"));
	xxx_IDE.searchHxmlFiles(null,null,function(found) {
		console.log(found.length + " hxml files found");
		xxx_IDE.hxmlFiles = found;
		if(state != null && state.hxml != null) {
			if(xxx_IDE.hxmlFiles.indexOf(state.hxml) != -1) {
				xxx_IDE.selectHxml(state.hxml);
			}
		} else {
			xxx_IDE.selectHxml(found[0]);
		}
		atom.workspace.observeTextEditors(function(editor) {
			var path = editor.getPath();
			if(path != null && haxe_io_Path.extension(path) == "hx") {
				editor.onDidChange(function(e1) {
				});
			}
		});
	});
};
xxx_IDE.serialize = function() {
	return { hxml : xxx_IDE.hxml != null ? xxx_IDE.hxml.getPath() : null};
};
xxx_IDE.deactivate = function() {
	xxx_IDE.disposables.dispose();
	xxx_IDE.server.stop();
};
xxx_IDE.onSelectHxml = function(h) {
	return xxx_IDE.emitter.on("hxml_select",h);
};
xxx_IDE.onBuild = function(h) {
	return xxx_IDE.emitter.on("build",h);
};
xxx_IDE.selectHxml = function(path) {
	if(path == null) {
		xxx_IDE.hxml = null;
	} else {
		if(xxx_IDE.hxml != null && path == xxx_IDE.hxml.getPath()) {
			return;
		}
		xxx_IDE.hxml = new atom_File(path);
	}
	xxx_IDE.emitter.emit("hxml_select",xxx_IDE.hxml);
};
xxx_IDE.build = function() {
	if(xxx_IDE.hxml == null) {
		atom.notifications.addWarning("No hxml file selected");
		return null;
	}
	var build = new xxx_Build(xxx_IDE.hxml);
	var view = new xxx_view_BuildView(build);
	xxx_IDE.emitter.emit("build",build);
	build.start();
	return build;
};
xxx_IDE.searchHxmlFiles = function(paths,maxDepth,callback) {
	if(maxDepth == null) {
		maxDepth = 5;
	}
	if(paths == null) {
		paths = atom.project.getPaths();
	}
	var walk = function(dir,callback1,depth) {
		if(depth == null) {
			depth = 0;
		}
		var results = [];
		js_node_Fs.readdir(dir,function(err,list) {
			var pending = list.length;
			if(pending == 0) {
				callback1(results);
				return;
			}
			var _g = 0;
			while(_g < list.length) {
				var file = [list[_g]];
				++_g;
				var walk1 = js_node_Path.resolve(dir,file[0]);
				file[0] = walk1;
				js_node_Fs.stat(file[0],(function(file1) {
					return function(err1,stat) {
						if(stat != null && stat.isDirectory()) {
							if(depth < maxDepth) {
								var file2 = file1[0];
								var walk2 = (function() {
									return function(res) {
										results = results.concat(res);
										if((pending -= 1) == 0) {
											callback1(results);
										}
									};
								})();
								walk(file2,walk2,depth + 1);
							} else if((pending -= 1) == 0) {
								callback1(results);
							}
						} else {
							if(haxe_io_Path.extension(file1[0]) == "hxml") {
								results.push(file1[0]);
							}
							if((pending -= 1) == 0) {
								callback1(results);
							}
						}
					};
				})(file));
			}
		});
	};
	var found = [];
	var pathsSearched = 0;
	var _g1 = 0;
	while(_g1 < paths.length) {
		var path = paths[_g1];
		++_g1;
		walk(path,function(list1) {
			found = found.concat(list1);
			if((pathsSearched += 1) == paths.length) {
				callback(found);
			}
		});
	}
};
xxx_IDE.getTreeViewFile = function(ext) {
	var treeView = atom.packages.getLoadedPackage("tree-view");
	var path = treeView.serialize();
	if(path == null) {
		return null;
	}
	var path1 = path.selectedPath;
	if(ext == null || path1 != null && haxe_io_Path.extension(path1) == ext) {
		return path1;
	} else {
		return null;
	}
};
xxx_IDE.getConfig = function(id) {
	return atom.config.get("xxx." + id);
};
xxx_IDE.consumeStatusBar = function(bar) {
	bar.addLeftTile({ item : xxx_IDE.statusbar.element, priority : -100});
};
xxx_IDE.provideAutoCompletion = function() {
	return new xxx_AutoCompleteProvider();
};
xxx_IDE.provideService = function() {
	return { getHxml : function() {
		return xxx_IDE.hxml;
	}, selectHxml : xxx_IDE.selectHxml, build : xxx_IDE.build};
};
var xxx_view__$BuildView_ErrorMessageView = function(n,err) {
	this.error = err;
	this.element = window.document.createElement("li");
	this.element.classList.add("message","error");
	var index = window.document.createElement("i");
	index.textContent = Std.string(n + 1);
	this.element.appendChild(index);
	var path = window.document.createElement("span");
	path.classList.add("path");
	path.textContent = err.path;
	this.element.appendChild(path);
	var line = window.document.createElement("span");
	line.classList.add("line");
	line.textContent = err.line == null ? "null" : "" + err.line;
	this.element.appendChild(line);
	if(err.characters != null) {
		var start = window.document.createElement("span");
		start.classList.add("start");
		start.textContent = Std.string(err.characters.start);
		this.element.appendChild(start);
		var end = window.document.createElement("span");
		end.classList.add("end");
		end.textContent = Std.string(err.characters.end);
		this.element.appendChild(end);
	}
	var content = window.document.createElement("span");
	content.classList.add("content");
	content.textContent = err.content;
	this.element.appendChild(content);
};
xxx_view__$BuildView_ErrorMessageView.__name__ = true;
xxx_view__$BuildView_ErrorMessageView.prototype = {
	select: function() {
	}
};
var xxx_view_BuildView = function(build) {
	var _gthis = this;
	if(xxx_view_BuildView.current != null) {
		xxx_view_BuildView.current.destroy();
	}
	xxx_view_BuildView.current = this;
	this.element = window.document.createElement("div");
	this.element.classList.add("xxx-build","resizer");
	this.messages = window.document.createElement("ol");
	this.messages.classList.add("messages","scroller");
	this.element.appendChild(this.messages);
	this.panel = atom.workspace.addBottomPanel({ item : this.element, visible : true});
	var errors = [];
	build.on("start",function() {
		errors = [];
	});
	build.on("message",function(msg) {
		_gthis.log(msg);
	});
	build.on("error",function(err) {
		var _g = 0;
		var _g1 = err.split("\n");
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			var error = [om_haxe_ErrorMessage.parse(line)];
			if(error[0] == null) {
				_gthis.log(err,"error");
			} else {
				errors.push(error[0]);
				var view = [new xxx_view__$BuildView_ErrorMessageView(_gthis.messages.children.length,error[0])];
				view[0].element.onclick = (function(view1,error1) {
					return function() {
						view1[0].select();
						xxx_view_BuildView.openErrorPosition(error1[0]);
					};
				})(view,error);
				_gthis.messages.appendChild(view[0].element);
			}
		}
	});
	build.on("end",function(code) {
		if(code == 0) {
			if(_gthis.messages.children.length == 0) {
				_gthis.panel.hide();
			}
		} else if(errors.length > 0) {
			var err1 = errors[0];
			var file = new atom_File(err1.path,false);
			if(file.existsSync()) {
				xxx_view_BuildView.openErrorPosition(err1);
			} else {
				var rel = atom.project.relativizePath(build.hxml.getPath());
				err1.path = rel[0] + "/" + err1.path;
			}
		}
	});
	this.element.addEventListener("click",$bind(this,this.handleClick),false);
};
xxx_view_BuildView.__name__ = true;
xxx_view_BuildView.openPosition = function(path,line,column,activatePane,searchAllPanes,callback) {
	if(searchAllPanes == null) {
		searchAllPanes = true;
	}
	if(activatePane == null) {
		activatePane = true;
	}
	atom.workspace.open(path,{ initialLine : line, initialColumn : column, activatePane : activatePane, searchAllPanes : searchAllPanes}).then(function(editor) {
		if(callback != null) {
			callback(editor);
		}
	});
};
xxx_view_BuildView.openErrorPosition = function(err) {
	var line = err.line - 1;
	xxx_view_BuildView.openPosition(err.path,line,err.character,null,null,function(editor) {
		if(err.characters != null) {
			editor.setSelectedBufferRange(new atom_Range(new atom_Point(line,err.characters.start),new atom_Point(line,err.characters.end)));
		}
	});
};
xxx_view_BuildView.prototype = {
	destroy: function() {
		this.panel.destroy();
	}
	,log: function(msg,status) {
		msg = StringTools.trim(msg);
		if(msg.length == 0) {
			return;
		}
		var e = window.document.createElement("li");
		e.classList.add("message");
		if(status != null) {
			e.classList.add(status);
		}
		e.textContent = msg;
		this.messages.appendChild(e);
	}
	,handleClick: function(e) {
		if(e.ctrlKey) {
			this.panel.hide();
		}
	}
};
var xxx_view_StatusbarView = function() {
	var _gthis = this;
	this.element = window.document.createElement("div");
	this.element.classList.add("status-bar-xxx","inline-block");
	this.icon = window.document.createElement("span");
	this.icon.classList.add("icon-haxe");
	this.element.appendChild(this.icon);
	this.info = window.document.createElement("a");
	this.info.classList.add("info");
	this.element.appendChild(this.info);
	this.meta = window.document.createElement("span");
	this.meta.classList.add("meta");
	this.element.appendChild(this.meta);
	xxx_IDE.emitter.on("hxml_select",$bind(this,this.changeHxml));
	xxx_IDE.emitter.on("build",function(build) {
		var timeBuildStart = null;
		var numErrors = 0;
		build.on("start",function() {
			var t = process.hrtime();
			timeBuildStart = (t[0] * 1e9 + t[1]) / 1e6;
			_gthis.changeStatus("active");
		});
		build.on("message",function(msg) {
		});
		build.on("error",function(err) {
			numErrors += 1;
			_gthis.changeStatus("error");
		});
		build.on("end",function(code) {
			if(code == 0) {
				_gthis.changeStatus("success");
				var t1 = process.hrtime();
				var time = ((t1[0] * 1e9 + t1[1]) / 1e6 - timeBuildStart) / 1000;
				var timeStr = time == null ? "null" : "" + time;
				var cpos = timeStr.indexOf(".");
				var tmp = timeStr.substring(0,cpos) + timeStr.substring(cpos,3);
				_gthis.meta.textContent = tmp + "s";
			} else {
				_gthis.changeStatus("error");
				_gthis.meta.textContent = "(" + numErrors + ")";
			}
		});
	});
	this.info.addEventListener("click",$bind(this,this.handleClickInfo),false);
};
xxx_view_StatusbarView.__name__ = true;
xxx_view_StatusbarView.getRelativePath = function(fullPath) {
	var rel = atom.project.relativizePath(fullPath);
	var parts = rel[0].split("/");
	return parts[parts.length - 1] + "/" + rel[1];
};
xxx_view_StatusbarView.prototype = {
	dispose: function() {
		this.info.removeEventListener("click",$bind(this,this.handleClickInfo));
		if(this.contextMenu != null) {
			this.contextMenu.dispose();
		}
	}
	,changeHxml: function(hxml) {
		if(hxml == null) {
			this.icon.style.display = "none";
			this.info.textContent = "";
		} else {
			this.icon.style.display = "inline-block";
			var tmp = xxx_view_StatusbarView.getRelativePath(hxml.getPath());
			this.info.textContent = haxe_io_Path.withoutExtension(tmp);
		}
		this.meta.textContent = "";
		this.buildContextMenu();
	}
	,changeStatus: function(status) {
		if(status != this.status) {
			if(this.status != null) {
				this.icon.classList.remove(this.status);
				this.info.classList.remove(this.status);
			}
			this.status = status;
			if(status != null) {
				this.icon.classList.add(status);
				this.info.classList.add(status);
			}
		}
	}
	,buildContextMenu: function() {
		if(this.contextMenu != null) {
			this.contextMenu.dispose();
		}
		var items = [];
		if(xxx_IDE.hxml != null) {
			items.push({ label : "Build", command : "xxx:build"});
			items.push({ type : "separator"});
		}
		var _g = 0;
		var _g1 = xxx_IDE.hxmlFiles;
		while(_g < _g1.length) {
			var file = _g1[_g];
			++_g;
			if(xxx_IDE.hxml != null && xxx_IDE.hxml.getPath() == file) {
				continue;
			}
			items.push({ label : xxx_view_StatusbarView.getRelativePath(file), command : "xxx:select-hxml"});
		}
		this.contextMenu = atom.contextMenu.add({ ".status-bar-xxx .info" : items});
	}
	,handleClickInfo: function(e) {
		if(e.ctrlKey) {
			xxx_IDE.build();
		} else if(xxx_IDE.hxml != null) {
			atom.workspace.open(xxx_IDE.hxml.getPath());
		}
	}
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.__name__ = true;
Array.__name__ = true;
module.exports = xxx_IDE;
om_haxe_ErrorMessage.PATTERN = new EReg("^\\s*(.+):([0-9]+):\\s*(characters*|lines)\\s([0-9]+)(-([0-9]+))?\\s:\\s(.+)$","i");
thx_semver__$Version_Version_$Impl_$.VERSION = new EReg("^(\\d+)\\.(\\d+)\\.(\\d+)(?:[-]([a-z0-9.-]+))?(?:[+]([a-z0-9.-]+))?$","i");
thx_semver__$Version_Version_$Impl_$.SANITIZER = new EReg("[^0-9A-Za-z-]","g");
xxx_IDE.EVENT_SELECT_HXML = "hxml_select";
xxx_IDE.EVENT_BUILD = "build";
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this);

//# sourceMappingURL=xxx.js.map