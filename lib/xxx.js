// Generated by Haxe 4.0.0
(function ($hx_exports) { "use strict";
$hx_exports["xxx"] = $hx_exports["xxx"] || {};
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = true;
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var atom_CompositeDisposable = require("atom").CompositeDisposable;
var atom_Emitter = require("atom").Emitter;
var atom_File = require("atom").File;
var atom_Point = require("atom").Point;
var atom_Range = require("atom").Range;
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe_io_Path.__name__ = true;
haxe_io_Path.withoutExtension = function(path) {
	var s = new haxe_io_Path(path);
	s.ext = null;
	return s.toString();
};
haxe_io_Path.withoutDirectory = function(path) {
	var s = new haxe_io_Path(path);
	s.dir = null;
	return s.toString();
};
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if((o instanceof Array)) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_node_ChildProcess = require("child_process");
var js_node_Fs = require("fs");
var js_node_Path = require("path");
var js_node_buffer_Buffer = require("buffer").Buffer;
var om_ArrayTools = function() { };
om_ArrayTools.__name__ = true;
om_ArrayTools.equals = function(a,b,f) {
	if(a == null || b == null || a.length != b.length) {
		return false;
	}
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(!f(a[i],b[i])) {
			return false;
		}
	}
	return true;
};
var om_haxe_CompletionParser = function() { };
om_haxe_CompletionParser.__name__ = true;
om_haxe_CompletionParser.parseFunType = function(str) {
	var r = { args : [], ret : ""};
	var parts = str.split(":");
	if(parts.length == 1) {
		var a = parts[0].split("->");
		r.ret = HxOverrides.substr(a[1],1,null);
	} else {
		var i = str.lastIndexOf("->");
		r.ret = HxOverrides.substr(str,i + 3,null);
		str = HxOverrides.substr(str,0,i - 1);
		var s = str;
		var parseNext = null;
		parseNext = function() {
			var i1 = s.lastIndexOf(":");
			var name = HxOverrides.substr(s,0,i1 - 1);
			var j = name.lastIndexOf(" ");
			if(j != -1) {
				name = HxOverrides.substr(name,j + 1,null);
			}
			var type = HxOverrides.substr(s,i1 + 2,null);
			if(StringTools.endsWith(type," -> ")) {
				type = HxOverrides.substr(type,0,type.length - 4);
			}
			s = HxOverrides.substr(s,0,i1 - (name.length + 1));
			r.args.unshift([name,type]);
			if(s.length > 0) {
				parseNext();
			}
		};
		var parseNext1 = parseNext;
		parseNext1();
	}
	return r;
};
var om_haxe_ErrorMessage = function() {
};
om_haxe_ErrorMessage.__name__ = true;
om_haxe_ErrorMessage.parse = function(str) {
	if(om_haxe_ErrorMessage.EXPR.match(str)) {
		var e = new om_haxe_ErrorMessage();
		e.path = om_haxe_ErrorMessage.EXPR.matched(1);
		e.line = Std.parseInt(om_haxe_ErrorMessage.EXPR.matched(2));
		var posType = om_haxe_ErrorMessage.EXPR.matched(3);
		switch(posType) {
		case "character":
			e.character = Std.parseInt(om_haxe_ErrorMessage.EXPR.matched(4));
			e.content = om_haxe_ErrorMessage.EXPR.matched(7);
			break;
		case "characters":
			e.characters = { start : Std.parseInt(om_haxe_ErrorMessage.EXPR.matched(4)), end : Std.parseInt(om_haxe_ErrorMessage.EXPR.matched(6))};
			e.content = om_haxe_ErrorMessage.EXPR.matched(7);
			break;
		case "lines":
			e.lines = { start : Std.parseInt(om_haxe_ErrorMessage.EXPR.matched(4)), end : Std.parseInt(om_haxe_ErrorMessage.EXPR.matched(6))};
			e.content = om_haxe_ErrorMessage.EXPR.matched(7);
			break;
		}
		return e;
	}
	return null;
};
var om_haxe_LanguageServer = function(haxePath,verbose) {
	if(verbose == null) {
		verbose = false;
	}
	if(haxePath == null) {
		haxePath = "haxe";
	}
	this.haxePath = haxePath;
	this.verbose = verbose;
};
om_haxe_LanguageServer.__name__ = true;
om_haxe_LanguageServer.prototype = {
	start: function(callback,onDebug) {
		this.stop();
		this.buffer = new om_haxe__$LanguageServer_MessageBuffer();
		this.nextMessageLength = -1;
		var args = ["-v","--wait","stdio"];
		this.proc = js_node_ChildProcess.spawn(this.haxePath,args);
		this.proc.on("exit",$bind(this,this.handleExit));
		this.proc.stderr.on("data",$bind(this,this.handleData));
		if(onDebug != null) {
			this.proc.stdout.on("data",function(buf) {
				var str = buf.toString();
				onDebug(str);
			});
		}
		callback(null);
	}
	,stop: function() {
		if(this.proc != null) {
			this.proc.removeAllListeners();
			try {
				this.proc.kill();
			} catch( e ) {
				console.log("om/haxe/LanguageServer.hx:80:",(e instanceof js__$Boot_HaxeError) ? e.val : e);
			}
			this.proc = null;
		}
		var req = this.requestsHead;
		while(req != null) {
			req.processResult(null);
			req = req.next;
		}
		this.requestsHead = this.requestsTail = this.currentRequest = null;
	}
	,query: function(args,stdin,onResult,onError,onMessage) {
		var req = new om_haxe__$LanguageServer_Request(args,stdin,onResult,onError,onMessage);
		if(this.requestsHead == null) {
			this.requestsHead = this.requestsTail = req;
		} else {
			this.requestsTail.next = req;
			req.prev = this.requestsTail;
			this.requestsTail = req;
		}
		this.checkQueue();
	}
	,checkQueue: function() {
		if(this.currentRequest != null) {
			return;
		}
		if(this.requestsHead != null) {
			this.currentRequest = this.requestsHead;
			this.requestsHead = this.currentRequest.next;
			this.proc.stdin.write(this.currentRequest.prepareBody());
		}
	}
	,handleData: function(buf) {
		this.buffer.append(buf);
		while(true) {
			if(this.nextMessageLength == -1) {
				var length = this.buffer.tryReadLength();
				if(length == -1) {
					return;
				}
				this.nextMessageLength = length;
			}
			var msg = this.buffer.tryReadContent(this.nextMessageLength);
			if(msg == null) {
				return;
			}
			this.nextMessageLength = -1;
			if(this.currentRequest != null) {
				var request = this.currentRequest;
				this.currentRequest = null;
				request.processResult(msg);
				this.checkQueue();
			}
		}
	}
	,handleExit: function(a,b) {
		console.log("om/haxe/LanguageServer.hx:141:","Haxe process was killed");
		console.log("om/haxe/LanguageServer.hx:142:",a);
		console.log("om/haxe/LanguageServer.hx:143:",b);
	}
};
var om_haxe__$LanguageServer_MessageBuffer = function(size) {
	if(size == null) {
		size = 8192;
	}
	this.size = size;
	this.buffer = new js_node_buffer_Buffer(size);
	this.index = 0;
};
om_haxe__$LanguageServer_MessageBuffer.__name__ = true;
om_haxe__$LanguageServer_MessageBuffer.prototype = {
	append: function(chunk) {
		if(this.buffer.length - this.index >= chunk.length) {
			chunk.copy(this.buffer,this.index,0,chunk.length);
		} else {
			var nsize = (Math.ceil((this.index + chunk.length) / this.size) + 1) * this.size | 0;
			if(this.index == 0) {
				this.buffer = new js_node_buffer_Buffer(nsize);
				chunk.copy(this.buffer,0,0,chunk.length);
			} else {
				this.buffer = js_node_buffer_Buffer.concat([this.buffer.slice(0,this.index),chunk],nsize);
			}
		}
		this.index += chunk.length;
	}
	,tryReadLength: function() {
		if(this.index < 4) {
			return -1;
		}
		var len = this.buffer.readInt32LE(0);
		this.buffer = this.buffer.slice(4);
		this.index -= 4;
		return len;
	}
	,tryReadContent: function(length) {
		if(this.index < length) {
			return null;
		}
		var res = this.buffer.toString("utf-8",0,length);
		var nstart = length;
		this.buffer.copy(this.buffer,0,nstart);
		this.index -= nstart;
		return res;
	}
};
var om_haxe__$LanguageServer_Request = function(args,stdin,onResult,onError,onMessage) {
	this.args = args;
	this.stdin = stdin;
	this.onResult = onResult;
	this.onError = onError;
	this.onMessage = onMessage;
};
om_haxe__$LanguageServer_Request.__name__ = true;
om_haxe__$LanguageServer_Request.prototype = {
	prepareBody: function() {
		if(this.stdin != null) {
			this.args = this.args.concat(["-D","display-stdin"]);
		}
		var lbuf = new js_node_buffer_Buffer(4);
		var chunks = [lbuf];
		var length = 0;
		var _g = 0;
		var _g1 = this.args;
		while(_g < _g1.length) {
			var arg = _g1[_g];
			++_g;
			var buf = new js_node_buffer_Buffer("" + arg + "\n");
			chunks.push(buf);
			length += buf.length;
		}
		if(this.stdin != null) {
			var sbuf = new js_node_buffer_Buffer([1]);
			chunks.push(sbuf);
			var buf1 = new js_node_buffer_Buffer(this.stdin);
			chunks.push(buf1);
			length += buf1.length + sbuf.length;
		}
		lbuf.writeInt32LE(length,0);
		return js_node_buffer_Buffer.concat(chunks,length + 4);
	}
	,processResult: function(data) {
		if(data == null) {
			this.onResult(null);
			return;
		}
		var buf_b = "";
		var hasError = false;
		var _g = 0;
		var _g1 = data.split("\n");
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			var code = line.charCodeAt(0);
			switch(code) {
			case 1:
				var line1 = StringTools.replace(line.substring(1),"\x01","\n");
				if(this.onMessage != null) {
					this.onMessage(line1);
				}
				break;
			case 2:
				hasError = true;
				break;
			case 65:
				if(this.onMessage != null) {
					this.onMessage(line);
				}
				break;
			default:
				buf_b += line == null ? "null" : "" + line;
				buf_b += "\n";
			}
		}
		var data1 = StringTools.trim(buf_b);
		if(hasError) {
			this.onError(data1);
		} else {
			this.onResult(data1);
		}
	}
};
var xxx_AutoCompleteProvider = function() {
	this.excludeLowerPriority = false;
	this.disableForSelector = ".source.hx .comment";
	this.selector = ".source.hx";
	var _gthis = this;
	var cfg = atom.config.get("xxx." + "autocomplete");
	this.enabled = cfg.enabled;
	this.disposables = new atom_CompositeDisposable();
	this.disposables.add(atom.config.observe("xxx.autocomplete",function(n) {
		_gthis.enabled = n.enabled;
	}));
};
xxx_AutoCompleteProvider.__name__ = true;
xxx_AutoCompleteProvider.createSuggestion = function(item,completeFunArgs) {
	if(completeFunArgs == null) {
		completeFunArgs = true;
	}
	var sug = { type : item.k, text : item.n, description : xxx_AutoCompleteProvider.formatDoc(item.d)};
	var _g = item.k;
	if(_g == null) {
		console.log("AutoCompleteProvider.hx:288:","TODO");
		sug.text = item.t;
	} else {
		switch(_g) {
		case "literal":
			sug.type = "keyword";
			break;
		case "method":
			var displayText = item.n + "(";
			var snippet = item.n + "(";
			var funType = om_haxe_CompletionParser.parseFunType(item.t);
			sug.rightLabel = funType.ret;
			if(funType.args.length > 0) {
				displayText += " ";
				snippet += " ";
			}
			var argsDisplay = [];
			var argsSnippets = [];
			var _g1 = 0;
			var _g2 = funType.args.length;
			while(_g1 < _g2) {
				var i = _g1++;
				var arg = funType.args[i];
				argsDisplay.push(arg[0] + " : " + arg[1]);
				var snippet1 = "${" + (i + 1) + ":" + arg[0] + "}";
				argsSnippets.push(snippet1);
			}
			displayText += argsDisplay.join(", ");
			snippet += argsSnippets.join(", ");
			if(funType.args.length > 0) {
				displayText += " ";
				snippet += " ";
			}
			displayText += ")";
			snippet += ")$0";
			sug.displayText = displayText;
			sug.snippet = completeFunArgs ? snippet : item.n;
			sug.text = null;
			break;
		case "static":
			sug.type = "method";
			sug.snippet = item.n + "()$0";
			sug.displayText = item.n + "()";
			break;
		case "var":
			sug.type = "variable";
			sug.rightLabel = item.t;
			break;
		}
	}
	return sug;
};
xxx_AutoCompleteProvider.formatDoc = function(doc) {
	if(doc == null) {
		return "";
	}
	doc = StringTools.trim(doc);
	var r = [];
	var _g = 0;
	var _g1 = doc.split("\n");
	while(_g < _g1.length) {
		var line = _g1[_g];
		++_g;
		r.push(StringTools.trim(line));
	}
	return r.join("\n");
};
xxx_AutoCompleteProvider.prototype = {
	onError: function(error) {
	}
	,getSuggestions: function(req) {
		var _gthis = this;
		return new Promise(function(resolve,reject) {
			if(!_gthis.enabled) {
				resolve([]);
				return;
			}
			var editor = req.editor;
			var position = editor.getCursorBufferPosition();
			var prefixPos = req.bufferPosition;
			var prefix = req.prefix;
			var replacementPrefix = "";
			var line = editor.getTextInBufferRange(new atom_Range(new atom_Point(prefixPos.row,0),prefixPos));
			if(xxx_AutoCompleteProvider.EXPR_PREFIX_FIELD.match(line)) {
				prefix = ".";
				replacementPrefix = xxx_AutoCompleteProvider.EXPR_PREFIX_FIELD.matched(1);
				prefixPos.column -= replacementPrefix.length;
			} else if(xxx_AutoCompleteProvider.EXPR_PREFIX_CALL.match(line)) {
				prefix = "(";
				replacementPrefix = xxx_AutoCompleteProvider.EXPR_PREFIX_CALL.matched(1);
				prefixPos.column -= replacementPrefix.length;
			}
			console.log("AutoCompleteProvider.hx:63:","PREFIX = [" + prefix + "][" + replacementPrefix + "]");
			if(_gthis.service == null) {
				_gthis.service = new xxx_CompletionService(editor);
			} else {
				_gthis.service.editor = editor;
			}
			switch(prefix) {
			case "(":
				_gthis.service.callArgument(prefixPos).then(function(item) {
				});
				return;
			case ".":
				if(xxx_AutoCompleteProvider.EXPR_ALPHANUMERIC_END.match(line)) {
					resolve([]);
					return;
				}
				_gthis.service.fieldAccess(prefixPos).then(function(items) {
					var suggestions = [];
					var isImportDecl = xxx_AutoCompleteProvider.EXPR_TYPEPATH.match(line);
					var _g = 0;
					while(_g < items.length) {
						var item1 = items[_g];
						++_g;
						if(replacementPrefix.length > 0 && !StringTools.startsWith(item1.n,replacementPrefix)) {
							continue;
						}
						if(isImportDecl) {
							var pack = xxx_AutoCompleteProvider.EXPR_TYPEPATH.matched(2);
							var type = pack.split(".").pop();
							if(type == item1.n) {
								continue;
							}
						}
						var sug = xxx_AutoCompleteProvider.createSuggestion(item1,!isImportDecl);
						suggestions.push(sug);
					}
					resolve(suggestions);
					return;
				});
				return;
			default:
				_gthis.service.topLevel(prefixPos).then(function(items1) {
					var suggestions1 = new haxe_ds_StringMap();
					var _g1 = 0;
					while(_g1 < items1.length) {
						var item2 = items1[_g1];
						++_g1;
						var name;
						var _g11 = item2.k;
						if(_g11 == null) {
							name = null;
						} else {
							switch(_g11) {
							case "enum":case "enumabstract":case "literal":case "local":case "member":case "package":case "static":
								name = item2.c;
								break;
							case "type":
								name = item2.p;
								break;
							default:
								name = null;
							}
						}
						if(prefix.length > 0 && StringTools.trim(prefix).length != 0 && name != null && !StringTools.startsWith(name,prefix)) {
							continue;
						}
						var sug1 = { text : name, type : item2.k, description : xxx_AutoCompleteProvider.formatDoc(item2.d)};
						var _g2 = item2.k;
						if(_g2 == null) {
							window.console.warn("TODO: " + Std.string(item2));
						} else {
							switch(_g2) {
							case "enum":
								sug1.type = "enum";
								sug1.rightLabel = item2.t;
								break;
							case "enumabstract":
								sug1.type = "enum";
								sug1.rightLabel = item2.t;
								break;
							case "global":
								sug1.type = "global";
								break;
							case "literal":
								sug1.type = "keyword";
								break;
							case "local":
								sug1.type = "value";
								sug1.rightLabel = item2.t;
								break;
							case "member":
								sug1.type = "member";
								sug1.rightLabel = item2.t;
								break;
							case "package":
								sug1.type = "package";
								break;
							case "static":
								sug1.displayText = item2.c + "()";
								sug1.rightLabel = item2.t;
								sug1.snippet = item2.c + "()$0";
								sug1.type = "method";
								break;
							case "type":
								sug1.type = "type";
								sug1.text = item2.p;
								break;
							default:
								window.console.warn("TODO: " + Std.string(item2));
							}
						}
						var key = item2.k;
						if(!(__map_reserved[key] != null ? suggestions1.existsReserved(key) : suggestions1.h.hasOwnProperty(key))) {
							var key1 = item2.k;
							var value = [];
							if(__map_reserved[key1] != null) {
								suggestions1.setReserved(key1,value);
							} else {
								suggestions1.h[key1] = value;
							}
						}
						var key2 = item2.k;
						(__map_reserved[key2] != null ? suggestions1.getReserved(key2) : suggestions1.h[key2]).push(sug1);
					}
					var result = [];
					var list = new haxe_ds__$StringMap_StringMapIterator(suggestions1,suggestions1.arrayKeys());
					while(list.hasNext()) {
						var list1 = list.next();
						list1.sort(function(a,b) {
							if(a.text > b.text) {
								return 1;
							} else if(a.text < b.text) {
								return -1;
							} else {
								return 0;
							}
						});
					}
					if(__map_reserved["local"] != null ? suggestions1.existsReserved("local") : suggestions1.h.hasOwnProperty("local")) {
						result = result.concat(__map_reserved["local"] != null ? suggestions1.getReserved("local") : suggestions1.h["local"]);
					}
					if(__map_reserved["static"] != null ? suggestions1.existsReserved("static") : suggestions1.h.hasOwnProperty("static")) {
						result = result.concat(__map_reserved["static"] != null ? suggestions1.getReserved("static") : suggestions1.h["static"]);
					}
					if(__map_reserved["global"] != null ? suggestions1.existsReserved("global") : suggestions1.h.hasOwnProperty("global")) {
						result = result.concat(__map_reserved["global"] != null ? suggestions1.getReserved("global") : suggestions1.h["global"]);
					}
					if(__map_reserved["literal"] != null ? suggestions1.existsReserved("literal") : suggestions1.h.hasOwnProperty("literal")) {
						result = result.concat(__map_reserved["literal"] != null ? suggestions1.getReserved("literal") : suggestions1.h["literal"]);
					}
					if(__map_reserved["type"] != null ? suggestions1.existsReserved("type") : suggestions1.h.hasOwnProperty("type")) {
						result = result.concat(__map_reserved["type"] != null ? suggestions1.getReserved("type") : suggestions1.h["type"]);
					}
					if(__map_reserved["package"] != null ? suggestions1.existsReserved("package") : suggestions1.h.hasOwnProperty("package")) {
						result = result.concat(__map_reserved["package"] != null ? suggestions1.getReserved("package") : suggestions1.h["package"]);
					}
					if(__map_reserved["enum"] != null ? suggestions1.existsReserved("enum") : suggestions1.h.hasOwnProperty("enum")) {
						result = result.concat(__map_reserved["enum"] != null ? suggestions1.getReserved("enum") : suggestions1.h["enum"]);
					}
					resolve(result);
					return;
				})["catch"](function(e) {
					_gthis.onError(e);
				});
				return;
			}
		})["catch"](function(e1) {
			window.console.error(e1);
			return Promise.resolve([]);
		});
	}
	,onDidInsertSuggestion: function(suggestion) {
	}
	,dispose: function() {
		this.disposables.dispose();
	}
};
var xxx_Build = function(hxml) {
	atom_Emitter.call(this);
	this.hxml = hxml;
};
xxx_Build.__name__ = true;
xxx_Build.__super__ = atom_Emitter;
xxx_Build.prototype = $extend(atom_Emitter.prototype,{
	start: function(verbose) {
		if(verbose == null) {
			verbose = false;
		}
		var _gthis = this;
		var parent = this.hxml.getParent();
		var cwd = parent.getPath();
		this.args = ["--cwd",cwd];
		if(verbose) {
			this.args.push("-v");
		}
		this.args.push(this.hxml.getBaseName());
		window.console.log("%c" + "haxe " + this.args.join(" "),"color:" + "#F1471D" + ";");
		xxx_IDE.server.query(this.args,null,function(res) {
			_gthis.emit("end",0);
		},function(err) {
			console.log("Build.hx:58:",err);
			var str = StringTools.trim(err);
			window.console.log(str);
			_gthis.emit("error",str);
			_gthis.emit("end",null);
		},function(msg) {
			console.log("Build.hx:69:",msg);
			_gthis.emit("message",msg);
		});
		this.emit("start",null);
	}
});
var xxx_CompletionService = function(editor) {
	this.editor = editor;
	this.parser = new DOMParser();
};
xxx_CompletionService.__name__ = true;
xxx_CompletionService.prototype = {
	callArgument: function(pos,extraArgs) {
		return this.query(pos,null,extraArgs).then(function(xml) {
			var d = xml.getAttribute("d");
			return { d : d == null ? null : StringTools.trim(d), t : StringTools.trim(xml.childNodes[0].nodeValue)};
		});
	}
	,fieldAccess: function(pos,extraArgs) {
		return this.query(pos,null,extraArgs).then(function(xml) {
			if(xml == null) {
				return [];
			}
			var items = [];
			var _g1 = 0;
			var _g = xml.children.length;
			while(_g1 < _g) {
				var i = _g1++;
				var e = xml.children[i];
				var t = e.getElementsByTagName("t")[0].childNodes[0];
				var d = e.getElementsByTagName("d")[0].childNodes[0];
				items.push({ n : e.getAttribute("n"), k : e.getAttribute("k"), t : t == null ? null : t.nodeValue, d : d == null ? null : StringTools.trim(d.nodeValue)});
			}
			return items;
		});
	}
	,topLevel: function(pos,extraArgs) {
		return this.query(pos,"toplevel",extraArgs).then(function(xml) {
			if(xml == null) {
				return [];
			}
			var items = [];
			var _g1 = 0;
			var _g = xml.children.length;
			while(_g1 < _g) {
				var i = _g1++;
				var e = xml.children[i];
				var d = e.getAttribute("d");
				items.push({ k : e.getAttribute("k"), n : e.getAttribute("n"), t : e.getAttribute("t"), d : d == null ? null : StringTools.trim(d), p : e.getAttribute("p"), c : e.childNodes[0].nodeValue});
			}
			return items;
		});
	}
	,query: function(pos,mode,extraArgs) {
		var _gthis = this;
		return new Promise(function(resolve,reject) {
			if(pos == null) {
				pos = _gthis.editor.getCursorBufferPosition();
			}
			var preText = _gthis.editor.getTextInBufferRange(new atom_Range(new atom_Point(0,0),pos));
			var index = preText.length;
			var displayPos = "" + _gthis.editor.getPath() + "@" + index;
			if(mode != null) {
				displayPos += "@" + mode;
			}
			var args = ["--display",displayPos];
			if(xxx_IDE.hxml != null) {
				args = [xxx_IDE.hxml.getPath()].concat(args);
			}
			if(extraArgs != null) {
				args = args.concat(extraArgs);
			}
			if(_gthis.lastQuery != null && om_ArrayTools.equals(_gthis.lastQuery,args,function(a,b) {
				return a == b;
			})) {
				resolve(_gthis.lastQueryXml);
				return;
			}
			xxx_IDE.server.query(args,preText,function(r) {
				_gthis.parser = new DOMParser();
				var xml = _gthis.parser.parseFromString(r,"application/xml").documentElement;
				console.log("CompletionService.hx:134:",xml);
				_gthis.lastQuery = args;
				_gthis.lastQueryXml = xml;
				resolve(xml);
			},function(e) {
				window.console.warn(e);
				resolve(null);
			},function(m) {
				window.console.warn(m);
				reject(m);
			});
		});
	}
};
var xxx_IDE = $hx_exports["xxx"]["IDE"] = function() { };
xxx_IDE.__name__ = true;
xxx_IDE.activate = function(state) {
	console.log("IDE.hx:34:","Atom-xxx");
	xxx_IDE.disposables = new atom_CompositeDisposable();
	xxx_IDE.emitter = new atom_Emitter();
	xxx_IDE.statusbar = new xxx_view_StatusbarView();
	xxx_IDE.projectPaths = atom.project.getPaths();
	xxx_IDE.server = new om_haxe_LanguageServer(atom.config.get("xxx." + "haxe_path"),true);
	xxx_IDE.searchHxmlFiles(null,null,function(found) {
		console.log("IDE.hx:48:",found.length + " hxml files found");
		xxx_IDE.hxmlFiles = found;
		if(state != null && state.hxml != null) {
			if(xxx_IDE.hxmlFiles.indexOf(state.hxml) != -1) {
				xxx_IDE.selectHxml(state.hxml);
			}
		} else {
			xxx_IDE.selectHxml(found[0]);
		}
		haxe_Timer.delay(function() {
			xxx_IDE.startServer();
		},atom.config.get("xxx." + "haxe_server_startdelay") * 1000 | 0);
		xxx_IDE.disposables.add(atom.project.onDidChangePaths(function(paths) {
			var added = [];
			var _g = 0;
			while(_g < paths.length) {
				var np = paths[_g];
				++_g;
				var gotAdded = true;
				var _g1 = 0;
				var _g2 = xxx_IDE.projectPaths;
				while(_g1 < _g2.length) {
					var op = _g2[_g1];
					++_g1;
					if(op == np) {
						gotAdded = false;
						break;
					}
				}
				if(gotAdded) {
					added.push(np);
				}
			}
			xxx_IDE.searchHxmlFiles(added,null,function(found1) {
				console.log("IDE.hx:103:",found1.length + " new hxml files found");
				xxx_IDE.hxmlFiles = xxx_IDE.hxmlFiles.concat(found1);
			});
			return xxx_IDE.projectPaths = paths;
		}));
		xxx_IDE.disposables.add(atom.workspace.observeTextEditors(function(editor) {
			var path = editor.getPath();
			var tmp = path != null && haxe_io_Path.extension(path) == "hx";
		}));
	});
};
xxx_IDE.serialize = function() {
	return { hxml : xxx_IDE.hxml != null ? xxx_IDE.hxml.getPath() : null};
};
xxx_IDE.deactivate = function() {
	xxx_IDE.disposables.dispose();
	xxx_IDE.server.stop();
};
xxx_IDE.startServer = function() {
	xxx_IDE.server.start(function(err) {
		if(err != null) {
			atom.notifications.addWarning(err);
		} else {
			xxx_IDE.disposables.add(atom.commands.add("atom-workspace","xxx:build",function(e) {
				var treeViewFile = e.target.getAttribute("data-path");
				if(treeViewFile != null && haxe_io_Path.extension(treeViewFile) == "hxml") {
					if(xxx_IDE.hxml != null && treeViewFile != xxx_IDE.hxml.getPath()) {
						xxx_IDE.selectHxml(treeViewFile);
					}
				}
				xxx_IDE.build();
			}));
			xxx_IDE.disposables.add(atom.commands.add("atom-workspace","xxx:goto",function(e1) {
				xxx_IDE.goto();
				return;
			}));
			xxx_IDE.disposables.add(atom.commands.add("atom-workspace","xxx:restart-server",function(e2) {
				xxx_IDE.server.stop();
				return haxe_Timer.delay(xxx_IDE.startServer,100);
			}));
		}
	},function(msg) {
	});
};
xxx_IDE.goto = function() {
	var editor = atom.workspace.getActiveTextEditor();
	if(editor == null) {
		return;
	}
	var cursorPos = editor.getCursorBufferPosition();
	var line = editor.getTextInBufferRange(new atom_Range(new atom_Point(cursorPos.row,0),cursorPos));
};
xxx_IDE.onSelectHxml = function(h) {
	return xxx_IDE.emitter.on("hxml_select",h);
};
xxx_IDE.onBuild = function(h) {
	return xxx_IDE.emitter.on("build",h);
};
xxx_IDE.getConfig = function(id) {
	return atom.config.get("xxx." + id);
};
xxx_IDE.selectHxml = function(path) {
	if(path == null) {
		xxx_IDE.hxml = null;
	} else {
		if(xxx_IDE.hxml != null && path == xxx_IDE.hxml.getPath()) {
			return;
		}
		xxx_IDE.hxml = new atom_File(path);
	}
	xxx_IDE.emitter.emit("hxml_select",xxx_IDE.hxml);
};
xxx_IDE.build = function() {
	if(xxx_IDE.hxml == null) {
		atom.notifications.addWarning("No hxml file selected");
		return null;
	}
	var build = new xxx_Build(xxx_IDE.hxml);
	var view = new xxx_view_BuildView(build);
	xxx_IDE.emitter.emit("build",build);
	build.start();
	return build;
};
xxx_IDE.searchHxmlFiles = function(paths,maxDepth,callback) {
	if(paths == null) {
		paths = atom.project.getPaths();
	}
	if(maxDepth == null) {
		maxDepth = atom.config.get("xxx." + "hxml_search_depth");
	}
	var walk = function(dir,callback1,depth) {
		if(depth == null) {
			depth = 0;
		}
		var results = [];
		js_node_Fs.readdir(dir,function(err,list) {
			if(err != null) {
				callback1(results);
			} else {
				var pending = list.length;
				if(pending == 0) {
					callback1(results);
					return;
				}
				var _g = 0;
				while(_g < list.length) {
					var file = [list[_g]];
					++_g;
					var walk1 = js_node_Path.resolve(dir,file[0]);
					file[0] = walk1;
					js_node_Fs.stat(file[0],(function(file1) {
						return function(err1,stat) {
							if(stat != null && stat.isDirectory()) {
								if(depth < maxDepth) {
									var file2 = file1[0];
									var walk2 = (function() {
										return function(res) {
											results = results.concat(res);
											if((pending -= 1) == 0) {
												callback1(results);
											}
										};
									})();
									walk(file2,walk2,depth + 1);
								} else if((pending -= 1) == 0) {
									callback1(results);
								}
							} else {
								if(haxe_io_Path.extension(file1[0]) == "hxml" && haxe_io_Path.withoutDirectory(file1[0]) != "extraParams.hxml") {
									results.push(file1[0]);
								}
								if((pending -= 1) == 0) {
									callback1(results);
								}
							}
						};
					})(file));
				}
			}
		});
	};
	var found = [];
	var pathsSearched = 0;
	var _g1 = 0;
	while(_g1 < paths.length) {
		var path = paths[_g1];
		++_g1;
		walk(path,function(list1) {
			found = found.concat(list1);
			if((pathsSearched += 1) == paths.length) {
				callback(found);
			}
		});
	}
};
xxx_IDE.consumeStatusBar = function(bar) {
	bar.addLeftTile({ item : xxx_IDE.statusbar.element, priority : -100});
};
xxx_IDE.provideAutoCompletion = function() {
	xxx_IDE.autocomplete = new xxx_AutoCompleteProvider();
	xxx_IDE.autocomplete.onError = function(e) {
		xxx_IDE.statusbar.setMeta(e);
	};
	return xxx_IDE.autocomplete;
};
xxx_IDE.provideService = function() {
	return { getHxml : function() {
		return xxx_IDE.hxml;
	}, selectHxml : xxx_IDE.selectHxml, build : xxx_IDE.build};
};
var xxx_view__$BuildView_ErrorMessageView = function(n,err) {
	this.error = err;
	this.element = window.document.createElement("li");
	this.element.classList.add("message","error");
	var index = window.document.createElement("i");
	index.textContent = Std.string(n + 1);
	this.element.appendChild(index);
	var path = window.document.createElement("span");
	path.classList.add("path");
	path.textContent = err.path;
	this.element.appendChild(path);
	var line = window.document.createElement("span");
	line.classList.add("line");
	line.textContent = err.line == null ? "null" : "" + err.line;
	this.element.appendChild(line);
	if(err.characters != null) {
		var start = window.document.createElement("span");
		start.classList.add("start");
		start.textContent = Std.string(err.characters.start);
		this.element.appendChild(start);
		var end = window.document.createElement("span");
		end.classList.add("end");
		end.textContent = Std.string(err.characters.end);
		this.element.appendChild(end);
	}
	var content = window.document.createElement("span");
	content.classList.add("content");
	content.textContent = err.content;
	this.element.appendChild(content);
};
xxx_view__$BuildView_ErrorMessageView.__name__ = true;
xxx_view__$BuildView_ErrorMessageView.prototype = {
	select: function() {
	}
};
var xxx_view_BuildView = function(build) {
	var _gthis = this;
	if(xxx_view_BuildView.current != null) {
		xxx_view_BuildView.current.destroy();
	}
	xxx_view_BuildView.current = this;
	this.element = window.document.createElement("div");
	this.element.classList.add("xxx-build","resizer","native-key-bindings");
	this.element.setAttribute("tabindex","-1");
	this.messages = window.document.createElement("ol");
	this.messages.classList.add("messages","scroller");
	this.element.appendChild(this.messages);
	this.panel = atom.workspace.addBottomPanel({ item : this.element, visible : true});
	var errors = [];
	build.on("start",function() {
		_gthis.timeStart = window.performance.now();
		errors = [];
	});
	build.on("message",function(msg) {
		_gthis.log(msg);
	});
	build.on("error",function(err) {
		var _g = 0;
		var _g1 = err.split("\n");
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			var error = [om_haxe_ErrorMessage.parse(line)];
			if(error[0] == null) {
				_gthis.log(err,"error");
			} else {
				errors.push(error[0]);
				var view = [new xxx_view__$BuildView_ErrorMessageView(_gthis.messages.children.length,error[0])];
				view[0].element.onclick = (function(view1,error1) {
					return function(e) {
						view1[0].select();
						if(e.ctrlKey) {
							xxx_view_BuildView.openErrorPosition(error1[0]);
						}
					};
				})(view,error);
				_gthis.messages.appendChild(view[0].element);
			}
		}
	});
	build.on("end",function(code) {
		if(code == 0) {
			if(_gthis.messages.children.length == 0) {
				_gthis.panel.hide();
			}
		} else if(errors.length > 0) {
			var err1 = errors[0];
			var hxmlPath = build.hxml.getPath();
			var filePath = haxe_io_Path.directory(hxmlPath) + "/" + err1.path;
			var file = new atom_File(filePath,false);
			if(!file.existsSync()) {
				var rel = atom.project.relativizePath(hxmlPath);
				err1.path = rel[0] + "/" + err1.path;
			}
		}
	});
	this.element.addEventListener("click",$bind(this,this.handleClick),false);
};
xxx_view_BuildView.__name__ = true;
xxx_view_BuildView.openPosition = function(path,line,column,activatePane,searchAllPanes,callback) {
	if(searchAllPanes == null) {
		searchAllPanes = true;
	}
	if(activatePane == null) {
		activatePane = true;
	}
	atom.workspace.open(path,{ initialLine : line, initialColumn : column, activatePane : activatePane, searchAllPanes : searchAllPanes}).then(function(editor) {
		if(callback != null) {
			callback(editor);
		}
	});
};
xxx_view_BuildView.openErrorPosition = function(err) {
	var line = err.line - 1;
	console.log("BuildView.hx:225:","openErrorPosition");
	console.log("BuildView.hx:226:",err);
	xxx_view_BuildView.openPosition(err.path,line,err.character,null,null,function(editor) {
		if(err.characters != null) {
			editor.setSelectedBufferRange(new atom_Range(new atom_Point(line,err.characters.start),new atom_Point(line,err.characters.end)));
		}
	});
};
xxx_view_BuildView.prototype = {
	destroy: function() {
		this.panel.destroy();
	}
	,log: function(msg,status) {
		msg = StringTools.trim(msg);
		if(msg.length == 0) {
			return;
		}
		var message = window.document.createElement("li");
		message.classList.add("message");
		if(status != null) {
			message.classList.add(status);
		}
		var time = window.document.createElement("span");
		time.classList.add("time");
		time.textContent = Std.string(window.performance.now() - this.timeStart | 0);
		message.appendChild(time);
		var content = window.document.createElement("span");
		content.classList.add("content");
		content.textContent = msg;
		message.appendChild(content);
		this.messages.appendChild(message);
	}
	,handleClick: function(e) {
		if(e.ctrlKey) {
			this.panel.hide();
		}
	}
};
var xxx_view_StatusbarView = function() {
	var _gthis = this;
	this.element = window.document.createElement("div");
	this.element.classList.add("status-bar-xxx","inline-block");
	this.icon = window.document.createElement("span");
	this.icon.classList.add("icon-haxe");
	this.element.appendChild(this.icon);
	this.info = window.document.createElement("a");
	this.info.classList.add("info");
	this.element.appendChild(this.info);
	this.meta = window.document.createElement("span");
	this.meta.classList.add("meta");
	this.element.appendChild(this.meta);
	xxx_IDE.emitter.on("hxml_select",$bind(this,this.changeHxml));
	xxx_IDE.emitter.on("build",function(build) {
		var timeBuildStart = null;
		var numErrors = 0;
		build.on("start",function() {
			timeBuildStart = window.performance.now();
			_gthis.changeStatus("active");
		});
		build.on("message",function(msg) {
		});
		build.on("error",function(err) {
			numErrors += 1;
			_gthis.changeStatus("error");
		});
		build.on("end",function(code) {
			if(code == 0) {
				_gthis.changeStatus("success");
				var time = (window.performance.now() - timeBuildStart) / 1000;
				var timeStr = time == null ? "null" : "" + time;
				var cpos = timeStr.indexOf(".");
				_gthis.meta.textContent = timeStr.substring(0,cpos) + timeStr.substring(cpos,3) + "s";
			} else {
				_gthis.changeStatus("error");
				_gthis.meta.textContent = "(" + numErrors + ")";
			}
		});
	});
	this.info.addEventListener("click",$bind(this,this.handleClickInfo),false);
};
xxx_view_StatusbarView.__name__ = true;
xxx_view_StatusbarView.getRelativePath = function(fullPath) {
	var rel = atom.project.relativizePath(fullPath);
	var parts = rel[0].split("/");
	return parts[parts.length - 1] + "/" + rel[1];
};
xxx_view_StatusbarView.prototype = {
	setMeta: function(text) {
		this.meta.textContent = text;
	}
	,dispose: function() {
		this.info.removeEventListener("click",$bind(this,this.handleClickInfo));
		if(this.contextMenu != null) {
			this.contextMenu.dispose();
		}
	}
	,changeHxml: function(hxml) {
		if(hxml == null) {
			this.icon.style.display = "none";
			this.info.textContent = "";
		} else {
			this.icon.style.display = "inline-block";
			var tmp = xxx_view_StatusbarView.getRelativePath(hxml.getPath());
			this.info.textContent = haxe_io_Path.withoutExtension(tmp);
		}
		this.meta.textContent = "";
		this.buildContextMenu();
	}
	,changeStatus: function(status) {
		if(status != this.status) {
			if(this.status != null) {
				this.icon.classList.remove(this.status);
				this.info.classList.remove(this.status);
			}
			this.status = status;
			if(status != null) {
				this.icon.classList.add(status);
				this.info.classList.add(status);
			}
		}
	}
	,buildContextMenu: function() {
		if(this.contextMenu != null) {
			this.contextMenu.dispose();
		}
		var items = [];
		if(xxx_IDE.hxml != null) {
			items.push({ label : "Build", command : "xxx:build"});
			items.push({ type : "separator"});
		}
		var _g = 0;
		var _g1 = xxx_IDE.hxmlFiles;
		while(_g < _g1.length) {
			var file = _g1[_g];
			++_g;
			if(xxx_IDE.hxml != null && xxx_IDE.hxml.getPath() == file) {
				continue;
			}
			items.push({ label : xxx_view_StatusbarView.getRelativePath(file), command : "xxx:select-hxml"});
		}
		this.contextMenu = atom.contextMenu.add({ ".status-bar-xxx .info" : items});
	}
	,handleClickInfo: function(e) {
		if(e.ctrlKey) {
			xxx_IDE.build();
		} else if(xxx_IDE.hxml != null) {
			atom.workspace.open(xxx_IDE.hxml.getPath());
		}
	}
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.__name__ = true;
Array.__name__ = true;
var __map_reserved = {};
module.exports = xxx_IDE;
om_haxe_ErrorMessage.EXPR = new EReg("^\\s*(.+):([0-9]+):\\s*(characters*|lines)\\s([0-9]+)(-([0-9]+))?\\s:\\s(.+)$","i");
xxx_AutoCompleteProvider.EXPR_ALPHANUMERIC_END = new EReg("[^a-zA-Z0-9_\\]\\)]([\\.0-9]+)$","");
xxx_AutoCompleteProvider.EXPR_PREFIX_FIELD = new EReg("\\.([a-zA-Z_][a-zA-Z_0-9]*)$","");
xxx_AutoCompleteProvider.EXPR_PREFIX_CALL = new EReg("\\(( *)$","");
xxx_AutoCompleteProvider.EXPR_TYPEPATH = new EReg("(import|using)\\s+([a-zA-Z0-9_]+(?:\\.[a-zA-Z0-9_]+)*)(?:\\s+(?:in|as)\\s+([a-zA-Z0-9_]+))?","g");
xxx_IDE.COLOR_HAXE_1 = "#F68712";
xxx_IDE.COLOR_HAXE_2 = "#F47216";
xxx_IDE.COLOR_HAXE_3 = "#F1471D";
xxx_IDE.COLOR_HAXE_4 = "#FFF200";
xxx_IDE.EVENT_SELECT_HXML = "hxml_select";
xxx_IDE.EVENT_BUILD = "build";
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this);

//# sourceMappingURL=xxx.js.map