// Generated by Haxe 4.0.0 (git build development @ bb9e378)
(function ($hx_exports, $global) { "use strict";
$hx_exports["xxx"] = $hx_exports["xxx"] || {};
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = ["EReg"];
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
Math.__name__ = ["Math"];
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = ["StringTools"];
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) {
		return s.split("\"").join("&quot;").split("'").join("&#039;");
	} else {
		return s;
	}
};
StringTools.htmlUnescape = function(s) {
	return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join("\"").split("&#039;").join("'").split("&amp;").join("&");
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Type = function() { };
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
Xml.__name__ = ["Xml"];
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.getReserved(att);
		} else {
			return _this.h[att];
		}
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		return this.attributeMap.keys();
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return HxOverrides.iter(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + child.nodeType);
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return HxOverrides.iter(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var atom_CompositeDisposable = require("atom").CompositeDisposable;
var atom_Emitter = require("atom").Emitter;
var atom_File = require("atom").File;
var atom_Point = require("atom").Point;
var atom_Range = require("atom").Range;
var haxe_IMap = function() { };
haxe_IMap.__name__ = ["haxe","IMap"];
var haxe_Log = function() { };
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	var msg = infos != null ? infos.fileName + ":" + infos.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(infos != null && infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(msg);
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function() { };
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.prototype = {
	__class__: haxe_io_Bytes
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe_io_Path.__name__ = ["haxe","io","Path"];
haxe_io_Path.withoutExtension = function(path) {
	var s = new haxe_io_Path(path);
	s.ext = null;
	return s.toString();
};
haxe_io_Path.withoutDirectory = function(path) {
	var s = new haxe_io_Path(path);
	s.dir = null;
	return s.toString();
};
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g1 = 0;
	var _g = position;
	while(_g1 < _g) {
		var i = _g1++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
haxe_xml_XmlParserException.__name__ = ["haxe","xml","XmlParserException"];
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		return Type.getClassName(js_Boot.getClass(this)) + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
haxe_xml_Parser.__name__ = ["haxe","xml","Parser"];
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCharCode(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCharCode(c1);
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null ? _this.existsReserved(s) : _this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						var x = __map_reserved[s] != null ? _this1.getReserved(s) : _this1.h[s];
						buf.b += Std.string(x);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCharCode(c),str,p));
				}
				buf.b += "&";
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				start = p--;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += "&";
		var len7 = p - start;
		buf.b += len7 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
haxe_xml_Printer.__name__ = ["haxe","xml","Printer"];
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		var _g = value.nodeType;
		switch(_g) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + value.nodeType);
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
				}
				var child = HxOverrides.iter(value.children);
				while(child.hasNext()) {
					var child1 = child.next();
					this.writeNode(child1,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + value.nodeType);
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input1 = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input1);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			var input2 = StringTools.trim(value.nodeValue);
			this.output.b += Std.string(input2);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input3 = StringTools.trim(commentContent);
			this.output.b += Std.string(input3);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
			}
			var child2 = HxOverrides.iter(value.children);
			while(child2.hasNext()) {
				var child3 = child2.next();
				this.writeNode(child3,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
		}
		var child = HxOverrides.iter(value.children);
		while(child.hasNext()) {
			var child1 = child.next();
			var _g = child1.nodeType;
			switch(_g) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child1.nodeType == Xml.Document || child1.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + child1.nodeType);
				}
				if(StringTools.ltrim(child1.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_node_ChildProcess = require("child_process");
var js_node_Fs = require("fs");
var js_node_Path = require("path");
var js_node_buffer_Buffer = require("buffer").Buffer;
var om_Math = function() { };
om_Math.__name__ = ["om","Math"];
om_Math.get_NaN = function() {
	return NaN;
};
om_Math.get_POSITIVE_INFINITY = function() {
	return Infinity;
};
om_Math.get_NEGATIVE_INFINITY = function() {
	return -Infinity;
};
om_Math.abs = function(f) {
	if(f < 0) {
		return -f;
	} else {
		return f;
	}
};
om_Math.acos = function(f) {
	return Math.acos(f);
};
om_Math.asin = function(f) {
	return Math.asin(f);
};
om_Math.atan = function(f) {
	return Math.atan(f);
};
om_Math.atan2 = function(y,x) {
	return Math.atan2(y,x);
};
om_Math.ceil = function(f) {
	return Math.ceil(f);
};
om_Math.clamp = function(value,minOrMax1,minOrMax2) {
	var min = minOrMax1 > minOrMax2 ? minOrMax2 : minOrMax1;
	var max = minOrMax1 < minOrMax2 ? minOrMax2 : minOrMax1;
	if(value < min) {
		return min;
	} else if(value > max) {
		return max;
	} else {
		return value;
	}
};
om_Math.cos = function(f) {
	return Math.cos(f);
};
om_Math.countDigits = function(x) {
	return (x == 0 ? 1 : Math.log(x) / Math.log(10) + 1) | 0;
};
om_Math.degToRad = function(f) {
	return f * 3.141592653589793 / 180;
};
om_Math.exp = function(f) {
	return Math.exp(f);
};
om_Math.fceil = function(f) {
	return Math.ceil(f);
};
om_Math.ffloor = function(f) {
	return Math.floor(f);
};
om_Math.floor = function(f) {
	return Math.floor(f);
};
om_Math.fmt = function(v) {
	var neg;
	if(v < 0) {
		neg = -1.0;
		v = -v;
	} else {
		neg = 1.0;
	}
	if(isNaN(v) || !isFinite(v)) {
		return v;
	}
	var digits = 4 - Math.log(v) / Math.log(10) | 0;
	if(digits < 1) {
		digits = 1;
	} else if(digits >= 10) {
		return 0.;
	}
	var exp = Math.pow(10,digits);
	return Math.floor(v * exp + .49999) * neg / exp;
};
om_Math.interpolate = function(f,min,max,equation) {
	if(max == null) {
		max = 1.0;
	}
	if(min == null) {
		min = 0.0;
	}
	if(equation == null) {
		return Math.round((min + f) * (max - min));
	} else {
		return Math.round(min + equation(f) * (max - min));
	}
};
om_Math.invSqrt = function(f) {
	return 1.0 / Math.sqrt(f);
};
om_Math.isFinite = function(v) {
	return isFinite(v);
};
om_Math.isNaN = function(v) {
	return isNaN(v);
};
om_Math.log = function(v) {
	return Math.log(v);
};
om_Math.log10 = function(v) {
	return Math.log(v) / 2.302585092994046;
};
om_Math.max = function(a,b) {
	if(a < b) {
		return b;
	} else {
		return a;
	}
};
om_Math.min = function(a,b) {
	if(a > b) {
		return b;
	} else {
		return a;
	}
};
om_Math.pow = function(v,p) {
	return Math.pow(v,p);
};
om_Math.radToDeg = function(f) {
	return f * 180 / 3.141592653589793;
};
om_Math.random = function(max) {
	if(max == null) {
		max = 1.0;
	}
	return Math.random() * max;
};
om_Math.round = function(f) {
	return Math.round(f);
};
om_Math.sin = function(f) {
	return Math.sin(f);
};
om_Math.sqrt = function(f) {
	return Math.sqrt(f);
};
om_Math.tan = function(f) {
	return Math.tan(f);
};
var om_Time = function() { };
om_Time.__name__ = ["om","Time"];
om_Time.now = function() {
	var t = process.hrtime();
	return (t[0] * 1e9 + t[1]) / 1e6;
};
om_Time.stamp = function() {
	var t = process.hrtime();
	return (t[0] * 1e9 + t[1]) / 1e6;
};
om_Time.asap = function(fn) {
	haxe_Timer.delay(fn,0);
};
om_Time.createNextTickProvider = function(ms) {
	if(ms == null) {
		ms = 0;
	}
	var time_ms = ms;
	return function(f) {
		return haxe_Timer.delay(f,time_ms);
	};
};
om_Time.getNanoSeconds = function() {
	var t = process.hrtime();
	return t[0] * 1e9 + t[1];
};
var om_haxe_ErrorMessage = function() {
};
om_haxe_ErrorMessage.__name__ = ["om","haxe","ErrorMessage"];
om_haxe_ErrorMessage.parse = function(str) {
	if(om_haxe_ErrorMessage.EXPR.match(str)) {
		var e = new om_haxe_ErrorMessage();
		e.path = om_haxe_ErrorMessage.EXPR.matched(1);
		e.line = Std.parseInt(om_haxe_ErrorMessage.EXPR.matched(2));
		var posType = om_haxe_ErrorMessage.EXPR.matched(3);
		switch(posType) {
		case "character":
			e.character = Std.parseInt(om_haxe_ErrorMessage.EXPR.matched(4));
			e.content = om_haxe_ErrorMessage.EXPR.matched(7);
			break;
		case "characters":
			e.characters = { start : Std.parseInt(om_haxe_ErrorMessage.EXPR.matched(4)), end : Std.parseInt(om_haxe_ErrorMessage.EXPR.matched(6))};
			e.content = om_haxe_ErrorMessage.EXPR.matched(7);
			break;
		case "lines":
			e.lines = { start : Std.parseInt(om_haxe_ErrorMessage.EXPR.matched(4)), end : Std.parseInt(om_haxe_ErrorMessage.EXPR.matched(6))};
			e.content = om_haxe_ErrorMessage.EXPR.matched(7);
			break;
		}
		return e;
	}
	return null;
};
om_haxe_ErrorMessage.prototype = {
	toString: function() {
		var str = "" + this.path + ":" + this.line + ": ";
		if(this.lines != null) {
			str += "lines " + this.lines.start + "-" + this.lines.end;
		} else if(this.character != null) {
			str += "character " + this.character;
		} else if(this.characters != null) {
			str += "characters " + this.characters.start + "-" + this.characters.end;
		}
		str += " : " + this.content;
		return str;
	}
	,toObject: function() {
		return { path : this.path, line : this.line, lines : this.lines, character : this.character, characters : this.characters, content : this.content};
	}
	,__class__: om_haxe_ErrorMessage
};
var om_haxe_LanguageServer = function(haxePath,verbose) {
	if(verbose == null) {
		verbose = false;
	}
	if(haxePath == null) {
		haxePath = "haxe";
	}
	this.haxePath = haxePath;
	this.verbose = verbose;
};
om_haxe_LanguageServer.__name__ = ["om","haxe","LanguageServer"];
om_haxe_LanguageServer.prototype = {
	isActive: function() {
		return this.process != null;
	}
	,start: function(callback) {
		var _gthis = this;
		this.stop();
		this.buffer = new om_haxe__$LanguageServer_MessageBuffer();
		this.nextMessageLength = -1;
		var args = ["-v","--wait","stdio"];
		this.process = js_node_ChildProcess.spawn(this.haxePath,args);
		this.process.on("exit",$bind(this,this.handleExit));
		this.process.stderr.on("data",$bind(this,this.handleData));
		this.process.stdout.on("data",function(buf) {
			var str = buf.toString();
			if(_gthis.verbose) {
				window.console.debug("%c" + str,"color:#EA8220;");
			}
		});
		callback(null);
	}
	,stop: function() {
		if(this.process != null) {
			this.process.removeAllListeners();
			try {
				this.process.kill();
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				haxe_Log.trace(e,{ fileName : "LanguageServer.hx", lineNumber : 74, className : "om.haxe.LanguageServer", methodName : "stop"});
			}
			this.process = null;
		}
		var req = this.requestsHead;
		while(req != null) {
			req.processResult(null);
			req = req.next;
		}
		this.requestsHead = this.requestsTail = this.currentRequest = null;
	}
	,getVersion: function(callback) {
		this.query(["-version"],null,callback,function(e) {
			haxe_Log.trace(e,{ fileName : "LanguageServer.hx", lineNumber : 86, className : "om.haxe.LanguageServer", methodName : "getVersion"});
		});
	}
	,query: function(args,stdin,onResult,onError,onMessage) {
		var req = new om_haxe__$LanguageServer_Request(args,stdin,onResult,onError,onMessage);
		if(this.requestsHead == null) {
			this.requestsHead = this.requestsTail = req;
		} else {
			this.requestsTail.next = req;
			req.prev = this.requestsTail;
			this.requestsTail = req;
		}
		this.checkQueue();
	}
	,checkQueue: function() {
		if(this.currentRequest != null) {
			return;
		}
		if(this.requestsHead != null) {
			this.currentRequest = this.requestsHead;
			this.requestsHead = this.currentRequest.next;
			this.process.stdin.write(this.currentRequest.prepareBody());
		}
	}
	,handleData: function(buf) {
		this.buffer.append(buf);
		while(true) {
			if(this.nextMessageLength == -1) {
				var length = this.buffer.tryReadLength();
				if(length == -1) {
					return;
				}
				this.nextMessageLength = length;
			}
			var msg = this.buffer.tryReadContent(this.nextMessageLength);
			if(msg == null) {
				return;
			}
			this.nextMessageLength = -1;
			if(this.currentRequest != null) {
				var request = this.currentRequest;
				this.currentRequest = null;
				request.processResult(msg);
				this.checkQueue();
			}
		}
	}
	,handleExit: function(a,b) {
		haxe_Log.trace("Haxe process was killed",{ fileName : "LanguageServer.hx", lineNumber : 137, className : "om.haxe.LanguageServer", methodName : "handleExit"});
		haxe_Log.trace(a,{ fileName : "LanguageServer.hx", lineNumber : 138, className : "om.haxe.LanguageServer", methodName : "handleExit"});
		haxe_Log.trace(b,{ fileName : "LanguageServer.hx", lineNumber : 139, className : "om.haxe.LanguageServer", methodName : "handleExit"});
	}
	,__class__: om_haxe_LanguageServer
};
var om_haxe__$LanguageServer_MessageBuffer = function(size) {
	if(size == null) {
		size = 8192;
	}
	this.size = size;
	this.buffer = new js_node_buffer_Buffer(size);
	this.index = 0;
};
om_haxe__$LanguageServer_MessageBuffer.__name__ = ["om","haxe","_LanguageServer","MessageBuffer"];
om_haxe__$LanguageServer_MessageBuffer.prototype = {
	append: function(chunk) {
		if(this.buffer.length - this.index >= chunk.length) {
			chunk.copy(this.buffer,this.index,0,chunk.length);
		} else {
			var nsize = (Math.ceil((this.index + chunk.length) / this.size) + 1) * this.size | 0;
			if(this.index == 0) {
				this.buffer = new js_node_buffer_Buffer(nsize);
				chunk.copy(this.buffer,0,0,chunk.length);
			} else {
				this.buffer = js_node_buffer_Buffer.concat([this.buffer.slice(0,this.index),chunk],nsize);
			}
		}
		this.index += chunk.length;
	}
	,tryReadLength: function() {
		if(this.index < 4) {
			return -1;
		}
		var len = this.buffer.readInt32LE(0);
		this.buffer = this.buffer.slice(4);
		this.index -= 4;
		return len;
	}
	,tryReadContent: function(length) {
		if(this.index < length) {
			return null;
		}
		var res = this.buffer.toString("utf-8",0,length);
		var nstart = length;
		this.buffer.copy(this.buffer,0,nstart);
		this.index -= nstart;
		return res;
	}
	,__class__: om_haxe__$LanguageServer_MessageBuffer
};
var om_haxe__$LanguageServer_Request = function(args,stdin,onResult,onError,onMessage) {
	this.args = args;
	this.stdin = stdin;
	this.onResult = onResult;
	this.onError = onError;
	this.onMessage = onMessage;
};
om_haxe__$LanguageServer_Request.__name__ = ["om","haxe","_LanguageServer","Request"];
om_haxe__$LanguageServer_Request.prototype = {
	prepareBody: function() {
		if(this.stdin != null) {
			this.args = this.args.concat(["-D","display-stdin"]);
		}
		var lbuf = new js_node_buffer_Buffer(4);
		var chunks = [lbuf];
		var length = 0;
		var _g = 0;
		var _g1 = this.args;
		while(_g < _g1.length) {
			var arg = _g1[_g];
			++_g;
			var buf = new js_node_buffer_Buffer("" + arg + "\n");
			chunks.push(buf);
			length += buf.length;
		}
		if(this.stdin != null) {
			var sbuf = new js_node_buffer_Buffer([1]);
			chunks.push(sbuf);
			var buf1 = new js_node_buffer_Buffer(this.stdin);
			chunks.push(buf1);
			length += buf1.length + sbuf.length;
		}
		lbuf.writeInt32LE(length,0);
		return js_node_buffer_Buffer.concat(chunks,length + 4);
	}
	,processResult: function(data) {
		if(data == null) {
			this.onResult(null);
			return;
		}
		var buf_b = "";
		var hasError = false;
		var _g = 0;
		var _g1 = data.split("\n");
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			var code = line.charCodeAt(0);
			switch(code) {
			case 1:
				var line1 = StringTools.replace(line.substring(1),"\x01","\n");
				if(this.onMessage != null) {
					this.onMessage(line1);
				}
				break;
			case 2:
				hasError = true;
				break;
			case 65:
				if(this.onMessage != null) {
					this.onMessage(line);
				}
				break;
			default:
				buf_b += line == null ? "null" : "" + line;
				buf_b += "\n";
			}
		}
		var data1 = StringTools.trim(buf_b);
		if(hasError) {
			this.onError(data1);
		} else {
			this.onResult(data1);
		}
	}
	,__class__: om_haxe__$LanguageServer_Request
};
var om_haxe_Message = function(path,line,start,end) {
	this.path = path;
	this.line = line;
	this.start = start;
	this.end = end;
};
om_haxe_Message.__name__ = ["om","haxe","Message"];
om_haxe_Message.parse = function(str) {
	if(!om_haxe_Message.EXPR.match(str)) {
		return null;
	} else {
		return new om_haxe_Message(om_haxe_Message.EXPR.matched(1),Std.parseInt(om_haxe_Message.EXPR.matched(2)),Std.parseInt(om_haxe_Message.EXPR.matched(4)),Std.parseInt(om_haxe_Message.EXPR.matched(5)));
	}
};
om_haxe_Message.prototype = {
	toString: function() {
		return "" + this.path + ":" + this.line + ": characters " + this.start + "-" + this.end;
	}
	,__class__: om_haxe_Message
};
var om_util_ArrayUtil = function() { };
om_util_ArrayUtil.__name__ = ["om","util","ArrayUtil"];
om_util_ArrayUtil.add = function(arr,v) {
	arr.push(v);
	return arr;
};
om_util_ArrayUtil.after = function(arr,e) {
	return arr.slice(arr.indexOf(e) + 1);
};
om_util_ArrayUtil.all = function(arr,predicate) {
	var _g = 0;
	while(_g < arr.length) {
		var e = arr[_g];
		++_g;
		if(!predicate(e)) {
			return false;
		}
	}
	return true;
};
om_util_ArrayUtil.any = function(arr,predicate) {
	var _g = 0;
	while(_g < arr.length) {
		var e = arr[_g];
		++_g;
		if(predicate(e)) {
			return true;
		}
	}
	return false;
};
om_util_ArrayUtil.append = function(a,b) {
	a = a.concat(b);
	return a;
};
om_util_ArrayUtil.before = function(arr,e) {
	return arr.slice(0,arr.indexOf(e));
};
om_util_ArrayUtil.contains = function(arr,e,eq) {
	if(eq == null) {
		return arr.indexOf(e) >= 0;
	}
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(eq(arr[i],e)) {
			return true;
		}
	}
	return false;
};
om_util_ArrayUtil.equals = function(a,b,f) {
	if(a == null || b == null || a.length != b.length) {
		return false;
	}
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(!f(a[i],b[i])) {
			return false;
		}
	}
	return true;
};
om_util_ArrayUtil.dropLeft = function(a,n) {
	if(n >= a.length) {
		return [];
	} else {
		return a.slice(n);
	}
};
om_util_ArrayUtil.dropRight = function(a,n) {
	if(n >= a.length) {
		return [];
	} else {
		return a.slice(0,a.length - n);
	}
};
om_util_ArrayUtil.first = function(a) {
	return a[0];
};
om_util_ArrayUtil.last = function(a) {
	return a[a.length - 1];
};
om_util_ArrayUtil.maxValue = function(a) {
	var m = a[0];
	var _g = 0;
	while(_g < a.length) {
		var v = a[_g];
		++_g;
		if(v > m) {
			m = v;
		}
	}
	return m;
};
om_util_ArrayUtil.maxValueIndex = function(a) {
	var h = a[0];
	var i = 0;
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var j = _g1++;
		var v = a[j];
		if(v > h) {
			h = v;
			i = j;
		}
	}
	return i;
};
om_util_ArrayUtil.random = function(arr) {
	return arr[Math.floor(Math.random() * arr.length - 1)];
};
om_util_ArrayUtil.resize = function(array,length,fill) {
	if(fill == null) {
		fill = 0;
	}
	while(array.length < length) array.push(fill);
	array.splice(length,array.length - length);
	return array;
};
om_util_ArrayUtil.resizeFloatArray = function(array,length,fill) {
	if(fill == null) {
		fill = 0.0;
	}
	while(array.length < length) array.push(fill);
	array.splice(length,array.length - length);
	return array;
};
om_util_ArrayUtil.reversed = function(a) {
	var b = a.slice();
	b.reverse();
	return b;
};
om_util_ArrayUtil.shuffle = function(a) {
	var x;
	var x1;
	var j;
	var i = a.length;
	while(i > 0) {
		j = Math.floor(Math.random() * i);
		x1 = a[i - 1];
		a[i - 1] = a[j];
		a[j] = x1;
		--i;
	}
	return a;
};
om_util_ArrayUtil.sorted = function(a,f) {
	var n = a.slice();
	n.sort(f);
	return n;
};
om_util_ArrayUtil["with"] = function(a,e) {
	return a.concat([e]);
};
var om_util_StringUtil = function() { };
om_util_StringUtil.__name__ = ["om","util","StringUtil"];
om_util_StringUtil.capitalize = function(str) {
	return str.charAt(0).toUpperCase() + HxOverrides.substr(str,1,null);
};
om_util_StringUtil.contains = function(src,str) {
	return src.indexOf(str) >= 0;
};
om_util_StringUtil.containsAny = function(src,str) {
	var src1 = src;
	return om_util_ArrayUtil.any(str,function(str1) {
		return om_util_StringUtil.contains(src1,str1);
	});
};
om_util_StringUtil.count = function(str,seperator) {
	if(seperator == null) {
		seperator = "";
	}
	return str.split(seperator).length;
};
om_util_StringUtil.countLines = function(str) {
	return str.split("\n").length;
};
om_util_StringUtil.isEmpty = function(str) {
	if(str != null) {
		return str == "";
	} else {
		return true;
	}
};
om_util_StringUtil.isLowerCase = function(str) {
	return str.toLowerCase() == str;
};
om_util_StringUtil.isUpperCase = function(str) {
	return str.toUpperCase() == str;
};
om_util_StringUtil.lines = function(str) {
	return new EReg("\r\n|\n\r|\n|\r","g").split(str);
};
om_util_StringUtil.parseFloat = function(f,precision) {
	if(precision == null) {
		if(f == null) {
			return "null";
		} else {
			return "" + f;
		}
	}
	if(precision < 0) {
		throw new js__$Boot_HaxeError("invalid precision");
	}
	var s = f == null ? "null" : "" + f;
	var i = s.indexOf(".");
	if(i == -1) {
		return s;
	}
	if(precision == 0) {
		return HxOverrides.substr(s,0,i);
	}
	return HxOverrides.substr(s,0,i + 1 + precision);
};
om_util_StringUtil.quote = function(str) {
	if(str.indexOf("\"") < 0) {
		return "\"" + str + "\"";
	} else if(str.indexOf("'") < 0) {
		return "'" + str + "'";
	} else {
		return "\"" + StringTools.replace(str,"\"","\\\"") + "\"";
	}
};
om_util_StringUtil.removeLinebreaks = function(str) {
	return str.split("\n").join("");
};
om_util_StringUtil.repeat = function(str,times) {
	var _g = [];
	var _g2 = 0;
	var _g1 = times;
	while(_g2 < _g1) {
		var i = _g2++;
		_g.push(str);
	}
	return _g.join("");
};
om_util_StringUtil.reverse = function(str) {
	var a = str.split("");
	a.reverse();
	return a.join("");
};
om_util_StringUtil.split = function(str,delimiter) {
	if(delimiter == null) {
		delimiter = "";
	}
	return str.split(delimiter);
};
om_util_StringUtil.toArray = function(str,delimiter) {
	if(delimiter == null) {
		delimiter = "";
	}
	return str.split(delimiter);
};
var xxx_AutoComplete = function(editor) {
	this.editor = editor;
};
xxx_AutoComplete.__name__ = ["xxx","AutoComplete"];
xxx_AutoComplete.prototype = {
	callArgument: function(pos,extraArgs) {
		return this.query(pos,null,extraArgs);
	}
	,fieldAccess: function(pos,extraArgs) {
		return this.query(pos,null,extraArgs).then(function(xml) {
			return Promise.resolve(xml);
		});
	}
	,position: function(pos,extraArgs) {
		return this.query(pos,"position",extraArgs).then(function(xml) {
			var _this = xml.elementsNamed("pos").next();
			if(_this.nodeType != Xml.Document && _this.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _this.nodeType);
			}
			var _this1 = _this.children[0];
			if(_this1.nodeType == Xml.Document || _this1.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _this1.nodeType);
			}
			var str = _this1.nodeValue;
			var msg = om_haxe_Message.parse(str);
			return Promise.resolve(msg);
		});
	}
	,topLevel: function(pos,extraArgs) {
		return this.query(pos,"toplevel",extraArgs);
	}
	,usage: function(pos,extraArgs) {
		return this.query(pos,"usage",extraArgs);
	}
	,query: function(pos,mode,extraArgs) {
		var _gthis = this;
		return new Promise(function(resolve,reject) {
			if(pos == null) {
				pos = _gthis.editor.getCursorBufferPosition();
			}
			var preText = _gthis.editor.getTextInBufferRange(new atom_Range(new atom_Point(0,0),pos));
			var index = preText.length;
			var displayPos = "" + _gthis.editor.getPath() + "@" + index;
			if(mode != null) {
				displayPos += "@" + mode;
			}
			var args = [xxx_IDE.hxml.getPath(),"--display",displayPos];
			if(extraArgs != null) {
				args = args.concat(extraArgs);
			}
			xxx_IDE.server.query(args,preText,function(r) {
				var xml = Xml.parse(r).firstElement();
				resolve(xml);
			},function(e) {
				window.console.warn(e);
			},function(m) {
				window.console.warn(m);
			});
		});
	}
	,__class__: xxx_AutoComplete
};
var xxx_AutoCompleteProvider = function() {
	this.suggestionPriority = 3;
	this.disableForSelector = ".source.haxe .comment";
	this.selector = ".source.haxe";
	var _gthis = this;
	var cfg = atom.config.get("xxx." + "autocomplete");
	this.enabled = cfg.enabled;
	this.disposables = new atom_CompositeDisposable();
	this.disposables.add(atom.config.observe("xxx.autocomplete",function(n) {
		_gthis.enabled = n.enabled;
	}));
};
xxx_AutoCompleteProvider.__name__ = ["xxx","AutoCompleteProvider"];
xxx_AutoCompleteProvider.prototype = {
	getSuggestions: function(req) {
		var _gthis = this;
		return new Promise(function(resolve,reject) {
			if(!_gthis.enabled || xxx_IDE.hxml == null) {
				resolve([]);
				return;
			}
			var editor = req.editor;
			var position = editor.getCursorBufferPosition();
			var prefixPosition = req.bufferPosition;
			var prefix = req.prefix;
			var replacementPrefix = "";
			var line = editor.getTextInBufferRange(new atom_Range(new atom_Point(prefixPosition.row,0),prefixPosition));
			if(xxx_AutoCompleteProvider.EXPR_PREFIX_FIELD.match(line)) {
				prefix = ".";
				replacementPrefix = xxx_AutoCompleteProvider.EXPR_PREFIX_FIELD.matched(1);
				prefixPosition.column -= replacementPrefix.length;
			} else if(xxx_AutoCompleteProvider.EXPR_PREFIX_CALL.match(line)) {
				prefix = "(";
				replacementPrefix = xxx_AutoCompleteProvider.EXPR_PREFIX_CALL.matched(1);
				prefixPosition.column -= replacementPrefix.length;
			}
			haxe_Log.trace("PREFIX = [" + prefix + "]",{ fileName : "AutoCompleteProvider.hx", lineNumber : 61, className : "xxx.AutoCompleteProvider", methodName : "getSuggestions"});
			var service = new xxx_AutoComplete(editor);
			switch(prefix) {
			case "(":
				service.query(prefixPosition,null,null).then(function(xml) {
					if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + xml.nodeType);
					}
					var _this = xml.children[0];
					if(_this.nodeType == Xml.Document || _this.nodeType == Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, unexpected " + _this.nodeType);
					}
					var str = StringTools.trim(_this.nodeValue);
					var types = str.split("->");
					var ret = types.pop();
					var suggestion = { type : "type", snippet : ""};
					var args = [];
					var _g1 = 0;
					var _g = types.length;
					while(_g1 < _g) {
						var i = _g1++;
						var type = StringTools.trim(types[i]);
						var parts = type.split(" : ");
						var tagA = "";
						var tagB = "";
						args.push("${" + (i + 1) + ":" + tagA + parts[0] + ":" + parts[1] + tagB + "}");
					}
					suggestion.snippet = " " + args.join(", ") + " )$0";
					resolve([suggestion]);
					return;
				});
				return;
			case ".":
				if(xxx_AutoCompleteProvider.EXPR_ALPHANUMERIC_END.match(line)) {
					resolve([]);
					return;
				}
				if(xxx_AutoCompleteProvider.EXPR_TYPEPATH.match(line)) {
					var pack = xxx_AutoCompleteProvider.EXPR_TYPEPATH.matched(2);
					haxe_Log.trace("TYPEPATH",{ fileName : "AutoCompleteProvider.hx", lineNumber : 76, className : "xxx.AutoCompleteProvider", methodName : "getSuggestions", customParams : [pack]});
					service.query(prefixPosition,null,null).then(function(xml1) {
						return Promise.resolve(xml1);
					}).then(function(xml2) {
						var typeSuggestions = [];
						var packSuggestions = [];
						var varSuggestions = [];
						var methodSuggestions = [];
						var e = xml2.elements();
						while(e.hasNext()) {
							var e1 = e.next();
							var name = e1.get("n");
							if(replacementPrefix != null && !StringTools.startsWith(name,replacementPrefix)) {
								continue;
							}
							var k = e1.get("k");
							var _this1 = e1.elementsNamed("d").next();
							if(_this1.nodeType != Xml.Document && _this1.nodeType != Xml.Element) {
								throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _this1.nodeType);
							}
							var _this2 = _this1.children[0];
							if(_this2.nodeType == Xml.Document || _this2.nodeType == Xml.Element) {
								throw new js__$Boot_HaxeError("Bad node type, unexpected " + _this2.nodeType);
							}
							var doc = _this2.nodeValue;
							switch(k) {
							case "method":
								var text = name;
								var displayText = name;
								var _this3 = e1.elementsNamed("t").next();
								if(_this3.nodeType != Xml.Document && _this3.nodeType != Xml.Element) {
									throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _this3.nodeType);
								}
								var _this4 = _this3.children[0];
								if(_this4.nodeType == Xml.Document || _this4.nodeType == Xml.Element) {
									throw new js__$Boot_HaxeError("Bad node type, unexpected " + _this4.nodeType);
								}
								var argsTypesStr = StringTools.htmlUnescape(_this4.nodeValue);
								displayText += "( " + argsTypesStr + " )";
								methodSuggestions.push({ type : "method", text : text, displayText : displayText, description : doc, leftLabel : "static"});
								break;
							case "package":
								packSuggestions.push({ type : k, text : name, description : doc});
								break;
							case "type":
								var lastPackPart = pack.split(".").pop();
								var str1 = lastPackPart.charAt(0);
								var isTypeCompletion = str1.toUpperCase() == str1;
								if(!isTypeCompletion) {
									typeSuggestions.push({ type : k, text : name, description : doc});
								}
								break;
							case "var":
								var _this5 = e1.elementsNamed("t").next();
								if(_this5.nodeType != Xml.Document && _this5.nodeType != Xml.Element) {
									throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _this5.nodeType);
								}
								var _this6 = _this5.children[0];
								if(_this6.nodeType == Xml.Document || _this6.nodeType == Xml.Element) {
									throw new js__$Boot_HaxeError("Bad node type, unexpected " + _this6.nodeType);
								}
								var type1 = StringTools.htmlUnescape(_this6.nodeValue);
								haxe_Log.trace(type1,{ fileName : "AutoCompleteProvider.hx", lineNumber : 116, className : "xxx.AutoCompleteProvider", methodName : "getSuggestions"});
								varSuggestions.push({ type : k, text : name, leftLabel : "static", rightLabel : type1, description : doc});
								break;
							}
						}
						var tmp = typeSuggestions.concat(packSuggestions).concat(varSuggestions).concat(methodSuggestions);
						resolve(tmp);
						return;
					});
					return;
				} else {
					service.query(prefixPosition,null,null).then(function(xml3) {
						return Promise.resolve(xml3);
					}).then(function(xml4) {
						var suggestions = [];
						var e2 = xml4.elements();
						while(e2.hasNext()) {
							var e3 = e2.next();
							var name1 = e3.get("n");
							if(replacementPrefix.length > 0 && !StringTools.startsWith(name1,replacementPrefix)) {
								continue;
							}
							var kind = e3.get("k");
							var doc1 = null;
							var _this7 = e3.elementsNamed("d").next();
							if(_this7.nodeType != Xml.Document && _this7.nodeType != Xml.Element) {
								throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _this7.nodeType);
							}
							var _this8 = _this7.children[0];
							if(_this8.nodeType == Xml.Document || _this8.nodeType == Xml.Element) {
								throw new js__$Boot_HaxeError("Bad node type, unexpected " + _this8.nodeType);
							}
							var doc2 = _this8.nodeValue;
							switch(kind) {
							case "method":
								var text1 = name1;
								var displayText1 = name1;
								var snippet = name1;
								var _this9 = e3.elementsNamed("t").next();
								if(_this9.nodeType != Xml.Document && _this9.nodeType != Xml.Element) {
									throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _this9.nodeType);
								}
								var _this10 = _this9.children[0];
								if(_this10.nodeType == Xml.Document || _this10.nodeType == Xml.Element) {
									throw new js__$Boot_HaxeError("Bad node type, unexpected " + _this10.nodeType);
								}
								var argsStr = StringTools.htmlUnescape(_this10.nodeValue);
								var args1 = argsStr.split("->");
								var ret1 = args1.pop();
								if(args1[0] == "Void") {
									displayText1 += "()";
									snippet += "()$0";
								} else {
									var _args = [];
									var _g11 = 0;
									var _g2 = args1.length;
									while(_g11 < _g2) {
										var i1 = _g11++;
										var t = args1[i1];
										var p = t.split(" : ");
										_args.push("${" + (i1 + 1) + ":" + p[0] + ":" + p[1] + "}");
									}
									displayText1 += "( " + args1.join(", ") + " )";
									snippet += "( " + _args.join(", ") + " )$0";
								}
								suggestions.push({ type : "function", snippet : snippet, displayText : displayText1, rightLabel : ret1, description : doc2});
								break;
							case "package":
								suggestions.push({ type : "package", text : name1, description : doc2});
								break;
							case "type":
								suggestions.push({ type : "type", text : name1, description : doc2});
								break;
							case "var":
								var _this11 = e3.elementsNamed("t").next();
								if(_this11.nodeType != Xml.Document && _this11.nodeType != Xml.Element) {
									throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _this11.nodeType);
								}
								var _this12 = _this11.children[0];
								if(_this12.nodeType == Xml.Document || _this12.nodeType == Xml.Element) {
									throw new js__$Boot_HaxeError("Bad node type, unexpected " + _this12.nodeType);
								}
								var type2 = _this12.nodeValue;
								suggestions.push({ type : "variable", text : name1, displayText : name1, rightLabel : type2, description : doc2});
								break;
							}
						}
						resolve(suggestions);
						return;
					});
					return;
				}
				break;
			default:
				service.query(prefixPosition,"toplevel",null).then(function(xml5) {
					if(xml5 == null) {
						resolve([]);
						return;
					}
					var suggestions1 = [];
					var e4 = xml5.elements();
					while(e4.hasNext()) {
						var e5 = e4.next();
						if(e5.nodeType != Xml.Document && e5.nodeType != Xml.Element) {
							throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + e5.nodeType);
						}
						var _this13 = e5.children[0];
						if(_this13.nodeType == Xml.Document || _this13.nodeType == Xml.Element) {
							throw new js__$Boot_HaxeError("Bad node type, unexpected " + _this13.nodeType);
						}
						var name2 = _this13.nodeValue;
						if(prefix.length > 0 && !StringTools.startsWith(name2,prefix)) {
							continue;
						}
						var k1 = e5.get("k");
						switch(k1) {
						case "literal":
							suggestions1.push({ type : "keyword", text : name2});
							break;
						case "local":
							suggestions1.push({ type : k1, text : name2});
							break;
						case "package":
							suggestions1.push({ type : k1, text : name2});
							break;
						case "static":
							suggestions1.push({ type : "method", text : name2});
							break;
						case "type":
							suggestions1.push({ type : k1, text : name2});
							break;
						}
					}
					resolve(suggestions1);
					return;
				});
				return;
			}
		})["catch"](function(e6) {
			haxe_Log.trace(e6,{ fileName : "AutoCompleteProvider.hx", lineNumber : 246, className : "xxx.AutoCompleteProvider", methodName : "getSuggestions"});
			return Promise.resolve([]);
		});
	}
	,onDidInsertSuggestion: function(suggestion) {
	}
	,dispose: function() {
		this.disposables.dispose();
	}
	,__class__: xxx_AutoCompleteProvider
};
var xxx_Build = function(hxml) {
	atom_Emitter.call(this);
	this.hxml = hxml;
};
xxx_Build.__name__ = ["xxx","Build"];
xxx_Build.__super__ = atom_Emitter;
xxx_Build.prototype = $extend(atom_Emitter.prototype,{
	onStart: function(h) {
		return this.on("start",h);
	}
	,onMessage: function(h) {
		return this.on("message",h);
	}
	,onError: function(h) {
		return this.on("error",h);
	}
	,onEnd: function(h) {
		return this.on("end",h);
	}
	,start: function(verbose) {
		if(verbose == null) {
			verbose = false;
		}
		var _gthis = this;
		var parent = this.hxml.getParent();
		var cwd = parent.getPath();
		this.args = ["--cwd",cwd];
		if(verbose) {
			this.args.push("-v");
		}
		this.args.push(this.hxml.getBaseName());
		xxx_IDE.server.query(this.args,null,function(res) {
			_gthis.emit("end",0);
		},function(err) {
			var tmp = StringTools.trim(err);
			_gthis.emit("error",tmp);
			_gthis.emit("end",null);
		},function(msg) {
			_gthis.emit("message",msg);
		});
		this.emit("start",null);
	}
	,__class__: xxx_Build
});
var xxx_IDE = $hx_exports["xxx"]["IDE"] = function() { };
xxx_IDE.__name__ = ["xxx","IDE"];
xxx_IDE.activate = function(state) {
	haxe_Log.trace("Atom-xxx",{ fileName : "IDE.hx", lineNumber : 37, className : "xxx.IDE", methodName : "activate"});
	xxx_IDE.disposables = new atom_CompositeDisposable();
	xxx_IDE.emitter = new atom_Emitter();
	xxx_IDE.statusbar = new xxx_view_StatusbarView();
	xxx_IDE.projectPaths = atom.project.getPaths();
	xxx_IDE.server = new om_haxe_LanguageServer(atom.config.get("xxx." + "haxe_path"),true);
	haxe_Timer.delay(function() {
		xxx_IDE.server.start(function(err) {
			if(err != null) {
				atom.notifications.addWarning(err);
			} else {
				xxx_IDE.disposables.add(atom.commands.add("atom-workspace","xxx:build",function(e) {
					var treeViewFile = e.target.getAttribute("data-path");
					if(treeViewFile != null && haxe_io_Path.extension(treeViewFile) == "hxml") {
						if(xxx_IDE.hxml != null && treeViewFile != xxx_IDE.hxml.getPath()) {
							xxx_IDE.selectHxml(treeViewFile);
						}
					}
					xxx_IDE.build();
				}));
				xxx_IDE.disposables.add(atom.commands.add("atom-workspace","xxx:goto",function(e1) {
					xxx_IDE.goto();
				}));
			}
		});
	},atom.config.get("xxx." + "haxe_server_startdelay"));
	xxx_IDE.searchHxmlFiles(null,null,function(found) {
		haxe_Log.trace(found.length + " hxml files found",{ fileName : "IDE.hx", lineNumber : 87, className : "xxx.IDE", methodName : "activate"});
		xxx_IDE.hxmlFiles = found;
		if(state != null && state.hxml != null) {
			if(xxx_IDE.hxmlFiles.indexOf(state.hxml) != -1) {
				xxx_IDE.selectHxml(state.hxml);
			}
		} else {
			xxx_IDE.selectHxml(found[0]);
		}
		xxx_IDE.build();
		xxx_IDE.disposables.add(atom.project.onDidChangePaths(function(paths) {
			var added = [];
			var _g = 0;
			while(_g < paths.length) {
				var np = paths[_g];
				++_g;
				var gotAdded = true;
				var _g1 = 0;
				var _g2 = xxx_IDE.projectPaths;
				while(_g1 < _g2.length) {
					var op = _g2[_g1];
					++_g1;
					if(op == np) {
						gotAdded = false;
						break;
					}
				}
				if(gotAdded) {
					added.push(np);
				}
			}
			xxx_IDE.searchHxmlFiles(added,null,function(found1) {
				haxe_Log.trace(found1.length + " new hxml files found",{ fileName : "IDE.hx", lineNumber : 140, className : "xxx.IDE", methodName : "activate"});
				xxx_IDE.hxmlFiles = xxx_IDE.hxmlFiles.concat(found1);
			});
			return xxx_IDE.projectPaths = paths;
		}));
		xxx_IDE.disposables.add(atom.workspace.observeTextEditors(function(editor) {
			var path = editor.getPath();
			var tmp = path != null && haxe_io_Path.extension(path) == "hx";
		}));
	});
};
xxx_IDE.serialize = function() {
	return { hxml : xxx_IDE.hxml != null ? xxx_IDE.hxml.getPath() : null};
};
xxx_IDE.deactivate = function() {
	xxx_IDE.disposables.dispose();
	xxx_IDE.server.stop();
};
xxx_IDE.goto = function() {
	var editor = atom.workspace.getActiveTextEditor();
	if(editor == null) {
		return;
	}
	var cursorPos = editor.getCursorBufferPosition();
	var line = editor.getTextInBufferRange(new atom_Range(new atom_Point(cursorPos.row,0),cursorPos));
};
xxx_IDE.onSelectHxml = function(h) {
	return xxx_IDE.emitter.on("hxml_select",h);
};
xxx_IDE.onBuild = function(h) {
	return xxx_IDE.emitter.on("build",h);
};
xxx_IDE.getConfig = function(id) {
	return atom.config.get("xxx." + id);
};
xxx_IDE.selectHxml = function(path) {
	if(path == null) {
		xxx_IDE.hxml = null;
	} else {
		if(xxx_IDE.hxml != null && path == xxx_IDE.hxml.getPath()) {
			return;
		}
		xxx_IDE.hxml = new atom_File(path);
	}
	xxx_IDE.emitter.emit("hxml_select",xxx_IDE.hxml);
};
xxx_IDE.build = function() {
	if(xxx_IDE.hxml == null) {
		atom.notifications.addWarning("No hxml file selected");
		return null;
	}
	var build = new xxx_Build(xxx_IDE.hxml);
	var view = new xxx_view_BuildView(build);
	xxx_IDE.emitter.emit("build",build);
	build.start();
	return build;
};
xxx_IDE.searchHxmlFiles = function(paths,maxDepth,callback) {
	if(maxDepth == null) {
		maxDepth = 2;
	}
	if(paths == null) {
		paths = atom.project.getPaths();
	}
	var walk = function(dir,callback1,depth) {
		if(depth == null) {
			depth = 0;
		}
		var results = [];
		js_node_Fs.readdir(dir,function(err,list) {
			if(err != null) {
				callback1(results);
			} else {
				var pending = list.length;
				if(pending == 0) {
					callback1(results);
					return;
				}
				var _g = 0;
				while(_g < list.length) {
					var file = [list[_g]];
					++_g;
					var walk1 = js_node_Path.resolve(dir,file[0]);
					file[0] = walk1;
					js_node_Fs.stat(file[0],(function(file1) {
						return function(err1,stat) {
							if(stat != null && stat.isDirectory()) {
								if(depth < maxDepth) {
									var file2 = file1[0];
									var walk2 = (function() {
										return function(res) {
											results = results.concat(res);
											if((pending -= 1) == 0) {
												callback1(results);
											}
										};
									})();
									walk(file2,walk2,depth + 1);
								} else if((pending -= 1) == 0) {
									callback1(results);
								}
							} else {
								if(haxe_io_Path.extension(file1[0]) == "hxml" && haxe_io_Path.withoutDirectory(file1[0]) != "extraParams.hxml") {
									results.push(file1[0]);
								}
								if((pending -= 1) == 0) {
									callback1(results);
								}
							}
						};
					})(file));
				}
			}
		});
	};
	var found = [];
	var pathsSearched = 0;
	var _g1 = 0;
	while(_g1 < paths.length) {
		var path = paths[_g1];
		++_g1;
		walk(path,function(list1) {
			found = found.concat(list1);
			if((pathsSearched += 1) == paths.length) {
				callback(found);
			}
		});
	}
};
xxx_IDE.consumeStatusBar = function(bar) {
	bar.addLeftTile({ item : xxx_IDE.statusbar.element, priority : -100});
};
xxx_IDE.provideAutoCompletion = function() {
	return new xxx_AutoCompleteProvider();
};
xxx_IDE.provideService = function() {
	return { getHxml : function() {
		return xxx_IDE.hxml;
	}, selectHxml : xxx_IDE.selectHxml, build : xxx_IDE.build};
};
var xxx_view__$BuildView_ErrorMessageView = function(n,err) {
	this.error = err;
	this.element = window.document.createElement("li");
	this.element.classList.add("message","error");
	var index = window.document.createElement("i");
	index.textContent = Std.string(n + 1);
	this.element.appendChild(index);
	var path = window.document.createElement("span");
	path.classList.add("path");
	path.textContent = err.path;
	this.element.appendChild(path);
	var line = window.document.createElement("span");
	line.classList.add("line");
	line.textContent = err.line == null ? "null" : "" + err.line;
	this.element.appendChild(line);
	if(err.characters != null) {
		var start = window.document.createElement("span");
		start.classList.add("start");
		start.textContent = Std.string(err.characters.start);
		this.element.appendChild(start);
		var end = window.document.createElement("span");
		end.classList.add("end");
		end.textContent = Std.string(err.characters.end);
		this.element.appendChild(end);
	}
	var content = window.document.createElement("span");
	content.classList.add("content");
	content.textContent = err.content;
	this.element.appendChild(content);
};
xxx_view__$BuildView_ErrorMessageView.__name__ = ["xxx","view","_BuildView","ErrorMessageView"];
xxx_view__$BuildView_ErrorMessageView.prototype = {
	select: function() {
	}
	,unselect: function() {
	}
	,__class__: xxx_view__$BuildView_ErrorMessageView
};
var xxx_view_BuildView = function(build) {
	var _gthis = this;
	if(xxx_view_BuildView.current != null) {
		xxx_view_BuildView.current.destroy();
	}
	xxx_view_BuildView.current = this;
	this.element = window.document.createElement("div");
	this.element.classList.add("xxx-build","resizer","native-key-bindings");
	this.element.setAttribute("tabindex","-1");
	this.messages = window.document.createElement("ol");
	this.messages.classList.add("messages","scroller");
	this.element.appendChild(this.messages);
	this.panel = atom.workspace.addBottomPanel({ item : this.element, visible : true});
	var errors = [];
	build.on("start",function() {
		var t = process.hrtime();
		_gthis.timeStart = (t[0] * 1e9 + t[1]) / 1e6;
		errors = [];
	});
	build.on("message",function(msg) {
		_gthis.log(msg);
	});
	build.on("error",function(err) {
		var _g = 0;
		var _g1 = err.split("\n");
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			var error = [om_haxe_ErrorMessage.parse(line)];
			if(error[0] == null) {
				_gthis.log(err,"error");
			} else {
				errors.push(error[0]);
				var view = [new xxx_view__$BuildView_ErrorMessageView(_gthis.messages.children.length,error[0])];
				view[0].element.onclick = (function(view1,error1) {
					return function(e) {
						view1[0].select();
						if(e.ctrlKey) {
							xxx_view_BuildView.openErrorPosition(error1[0]);
						}
					};
				})(view,error);
				_gthis.messages.appendChild(view[0].element);
			}
		}
	});
	build.on("end",function(code) {
		if(code == 0) {
			if(_gthis.messages.children.length == 0) {
				_gthis.panel.hide();
			}
		} else if(errors.length > 0) {
			var err1 = errors[0];
			var hxmlPath = build.hxml.getPath();
			var filePath = haxe_io_Path.directory(hxmlPath) + "/" + err1.path;
			var file = new atom_File(filePath,false);
			if(!file.existsSync()) {
				var rel = atom.project.relativizePath(hxmlPath);
				err1.path = rel[0] + "/" + err1.path;
			}
		}
	});
	this.element.addEventListener("click",$bind(this,this.handleClick),false);
};
xxx_view_BuildView.__name__ = ["xxx","view","BuildView"];
xxx_view_BuildView.openPosition = function(path,line,column,activatePane,searchAllPanes,callback) {
	if(searchAllPanes == null) {
		searchAllPanes = true;
	}
	if(activatePane == null) {
		activatePane = true;
	}
	atom.workspace.open(path,{ initialLine : line, initialColumn : column, activatePane : activatePane, searchAllPanes : searchAllPanes}).then(function(editor) {
		if(callback != null) {
			callback(editor);
		}
	});
};
xxx_view_BuildView.openErrorPosition = function(err) {
	var line = err.line - 1;
	haxe_Log.trace("openErrorPosition",{ fileName : "BuildView.hx", lineNumber : 225, className : "xxx.view.BuildView", methodName : "openErrorPosition"});
	haxe_Log.trace(err,{ fileName : "BuildView.hx", lineNumber : 226, className : "xxx.view.BuildView", methodName : "openErrorPosition"});
	xxx_view_BuildView.openPosition(err.path,line,err.character,null,null,function(editor) {
		if(err.characters != null) {
			editor.setSelectedBufferRange(new atom_Range(new atom_Point(line,err.characters.start),new atom_Point(line,err.characters.end)));
		}
	});
};
xxx_view_BuildView.prototype = {
	isVisible: function() {
		return this.panel.isVisible();
	}
	,show: function() {
		this.panel.show();
	}
	,hide: function() {
		this.panel.hide();
	}
	,toggle: function() {
		if(this.panel.isVisible()) {
			this.panel.hide();
		} else {
			this.panel.show();
		}
	}
	,destroy: function() {
		this.panel.destroy();
	}
	,log: function(msg,status) {
		msg = StringTools.trim(msg);
		if(msg.length == 0) {
			return;
		}
		var message = window.document.createElement("li");
		message.classList.add("message");
		if(status != null) {
			message.classList.add(status);
		}
		var time = window.document.createElement("span");
		time.classList.add("time");
		var t = process.hrtime();
		time.textContent = Std.string((t[0] * 1e9 + t[1]) / 1e6 - this.timeStart | 0);
		message.appendChild(time);
		var content = window.document.createElement("span");
		content.classList.add("content");
		content.textContent = msg;
		message.appendChild(content);
		this.messages.appendChild(message);
	}
	,handleClick: function(e) {
		if(e.ctrlKey) {
			this.panel.hide();
		}
	}
	,__class__: xxx_view_BuildView
};
var xxx_view_StatusbarView = function() {
	var _gthis = this;
	this.element = window.document.createElement("div");
	this.element.classList.add("status-bar-xxx","inline-block");
	this.icon = window.document.createElement("span");
	this.icon.classList.add("icon-haxe");
	this.element.appendChild(this.icon);
	this.info = window.document.createElement("a");
	this.info.classList.add("info");
	this.element.appendChild(this.info);
	this.meta = window.document.createElement("span");
	this.meta.classList.add("meta");
	this.element.appendChild(this.meta);
	xxx_IDE.emitter.on("hxml_select",$bind(this,this.changeHxml));
	xxx_IDE.emitter.on("build",function(build) {
		var timeBuildStart = null;
		var numErrors = 0;
		build.on("start",function() {
			var t = process.hrtime();
			timeBuildStart = (t[0] * 1e9 + t[1]) / 1e6;
			_gthis.changeStatus("active");
		});
		build.on("message",function(msg) {
		});
		build.on("error",function(err) {
			numErrors += 1;
			_gthis.changeStatus("error");
		});
		build.on("end",function(code) {
			if(code == 0) {
				_gthis.changeStatus("success");
				var t1 = process.hrtime();
				var time = ((t1[0] * 1e9 + t1[1]) / 1e6 - timeBuildStart) / 1000;
				var timeStr = time == null ? "null" : "" + time;
				var cpos = timeStr.indexOf(".");
				_gthis.meta.textContent = timeStr.substring(0,cpos) + timeStr.substring(cpos,3) + "s";
			} else {
				_gthis.changeStatus("error");
				_gthis.meta.textContent = "(" + numErrors + ")";
			}
		});
	});
	this.info.addEventListener("click",$bind(this,this.handleClickInfo),false);
};
xxx_view_StatusbarView.__name__ = ["xxx","view","StatusbarView"];
xxx_view_StatusbarView.getRelativePath = function(fullPath) {
	var rel = atom.project.relativizePath(fullPath);
	var parts = rel[0].split("/");
	return parts[parts.length - 1] + "/" + rel[1];
};
xxx_view_StatusbarView.prototype = {
	setMeta: function(text) {
		this.meta.textContent = text;
	}
	,dispose: function() {
		this.info.removeEventListener("click",$bind(this,this.handleClickInfo));
		if(this.contextMenu != null) {
			this.contextMenu.dispose();
		}
	}
	,changeHxml: function(hxml) {
		if(hxml == null) {
			this.icon.style.display = "none";
			this.info.textContent = "";
		} else {
			this.icon.style.display = "inline-block";
			var tmp = xxx_view_StatusbarView.getRelativePath(hxml.getPath());
			this.info.textContent = haxe_io_Path.withoutExtension(tmp);
		}
		this.meta.textContent = "";
		this.buildContextMenu();
	}
	,changeStatus: function(status) {
		if(status != this.status) {
			if(this.status != null) {
				this.icon.classList.remove(this.status);
				this.info.classList.remove(this.status);
			}
			this.status = status;
			if(status != null) {
				this.icon.classList.add(status);
				this.info.classList.add(status);
			}
		}
	}
	,buildContextMenu: function() {
		if(this.contextMenu != null) {
			this.contextMenu.dispose();
		}
		var items = [];
		if(xxx_IDE.hxml != null) {
			items.push({ label : "Build", command : "xxx:build"});
			items.push({ type : "separator"});
		}
		var _g = 0;
		var _g1 = xxx_IDE.hxmlFiles;
		while(_g < _g1.length) {
			var file = _g1[_g];
			++_g;
			if(xxx_IDE.hxml != null && xxx_IDE.hxml.getPath() == file) {
				continue;
			}
			items.push({ label : xxx_view_StatusbarView.getRelativePath(file), command : "xxx:select-hxml"});
		}
		this.contextMenu = atom.contextMenu.add({ ".status-bar-xxx .info" : items});
	}
	,handleClickInfo: function(e) {
		if(e.ctrlKey) {
			xxx_IDE.build();
		} else if(xxx_IDE.hxml != null) {
			atom.workspace.open(xxx_IDE.hxml.getPath());
		}
	}
	,__class__: xxx_view_StatusbarView
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var __map_reserved = {};
module.exports = xxx_IDE;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved["lt"] != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved["gt"] != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved["amp"] != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved["quot"] != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved["apos"] != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
js_Boot.__toStr = ({ }).toString;
om_Math.UINT16_MAX = 65535;
om_Math.INT16_MIN = -32768;
om_Math.INT16_MAX = 32767;
om_Math.INT32_MAX = 2147483647;
om_Math.E = 2.718281828459045;
om_Math.EPSILON = 1e-10;
om_Math.LN2 = 0.6931471805599453;
om_Math.LN10 = 2.302585092994046;
om_Math.LOG2E = 1.4426950408889634;
om_Math.LOG10E = 0.4342944819032518;
om_Math.PI = 3.141592653589793;
om_Math.TAU = 6.283185307179586;
om_Math.PHI = 1.618033988749895;
om_Math.SQRT1_2 = 0.7071067811865476;
om_Math.SQRT2 = 1.4142135623730951;
om_Time.startTime = (function($this) {
	var $r;
	var t = process.hrtime();
	$r = t[0] * 1e9 + t[1];
	return $r;
}(this));
om_haxe_ErrorMessage.EXPR = new EReg("^\\s*(.+):([0-9]+):\\s*(characters*|lines)\\s([0-9]+)(-([0-9]+))?\\s:\\s(.+)$","i");
om_haxe_Message.EXPR = new EReg("^\\s*(.+):([0-9]+):\\s(characters)\\s([0-9]+)-([0-9]+)$","i");
xxx_AutoCompleteProvider.EXPR_TYPEPATH = new EReg("(import|using)\\s+([a-zA-Z0-9_]+(?:\\.[a-zA-Z0-9_]+)*)(?:\\s+(?:in|as)\\s+([a-zA-Z0-9_]+))?","g");
xxx_AutoCompleteProvider.EXPR_ALPHANUMERIC_END = new EReg("[^a-zA-Z0-9_\\]\\)]([\\.0-9]+)$","");
xxx_AutoCompleteProvider.EXPR_PREFIX_FIELD = new EReg("\\.([a-zA-Z_][a-zA-Z_0-9]*)$","");
xxx_AutoCompleteProvider.EXPR_PREFIX_CALL = new EReg("\\(( *)$","");
xxx_IDE.EVENT_SELECT_HXML = "hxml_select";
xxx_IDE.EVENT_BUILD = "build";
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=xxx.js.map