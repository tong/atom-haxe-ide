// Generated by Haxe 3.3.0
(function ($hx_exports, $global) { "use strict";
$hx_exports["xxx"] = $hx_exports["xxx"] || {};
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = ["EReg"];
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			var tmp = this.r;
			var tmp1 = len < 0?s:HxOverrides.substr(s,0,pos + len);
			this.r.m = tmp.exec(tmp1);
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0?HxOverrides.substr(s,pos,null):HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
Math.__name__ = ["Math"];
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = ["StringTools"];
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Type = function() { };
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
Xml.__name__ = ["Xml"];
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.getReserved(att);
		} else {
			return _this.h[att];
		}
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		return HxOverrides.iter(_g);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,__class__: Xml
};
var atom_CompositeDisposable = require("atom").CompositeDisposable;
var atom_Disposable = function() { };
atom_Disposable.__name__ = ["atom","Disposable"];
atom_Disposable.prototype = {
	__class__: atom_Disposable
};
var atom_Emitter = require("atom").Emitter;
var atom_File = require("atom").File;
var atom_Point = require("atom").Point;
var atom_Range = require("atom").Range;
var haxe_IMap = function() { };
haxe_IMap.__name__ = ["haxe","IMap"];
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function() { };
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.prototype = {
	__class__: haxe_io_Bytes
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe_io_Path.__name__ = ["haxe","io","Path"];
haxe_io_Path.withoutExtension = function(path) {
	var s = new haxe_io_Path(path);
	s.ext = null;
	return s.toString();
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null?"":this.dir + (this.backslash?"\\":"/")) + this.file + (this.ext == null?"":"." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g1 = 0;
	while(_g1 < position) {
		var i = _g1++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
haxe_xml_XmlParserException.__name__ = ["haxe","xml","XmlParserException"];
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		return Type.getClassName(js_Boot.getClass(this)) + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
haxe_xml_Parser.__name__ = ["haxe","xml","Parser"];
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(tmp)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + tmp + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCharCode(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120?Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)):Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCharCode(c1);
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null?_this.existsReserved(s):_this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						buf.b += Std.string(__map_reserved[s] != null?_this1.getReserved(s):_this1.h[s]);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCharCode(c),str,p));
				}
				buf.b += "&";
				var len5 = p - start;
				buf.b += len5 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len5);
				start = p--;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += "&";
		var len7 = p - start;
		buf.b += len7 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_node_ChildProcess = require("child_process");
var js_node_Fs = require("fs");
var js_node_Path = require("path");
var js_node_buffer_Buffer = require("buffer").Buffer;
var om__$Time_Time_$Impl_$ = {};
om__$Time_Time_$Impl_$.__name__ = ["om","_Time","Time_Impl_"];
om__$Time_Time_$Impl_$._new = function(v) {
	return v;
};
om__$Time_Time_$Impl_$.now = function() {
	var t = process.hrtime();
	return (t[0] * 1e9 + t[1]) / 1e6;
};
om__$Time_Time_$Impl_$.getNanoSeconds = function() {
	var t = process.hrtime();
	return t[0] * 1e9 + t[1];
};
var om_haxe_ErrorMessage = function() {
};
om_haxe_ErrorMessage.__name__ = ["om","haxe","ErrorMessage"];
om_haxe_ErrorMessage.parse = function(str) {
	if(om_haxe_ErrorMessage.PATTERN.match(str)) {
		var e = new om_haxe_ErrorMessage();
		e.path = om_haxe_ErrorMessage.PATTERN.matched(1);
		e.line = Std.parseInt(om_haxe_ErrorMessage.PATTERN.matched(2));
		var posType = om_haxe_ErrorMessage.PATTERN.matched(3);
		switch(posType) {
		case "character":
			e.character = Std.parseInt(om_haxe_ErrorMessage.PATTERN.matched(4));
			e.content = om_haxe_ErrorMessage.PATTERN.matched(7);
			break;
		case "characters":
			e.characters = { start : Std.parseInt(om_haxe_ErrorMessage.PATTERN.matched(4)), end : Std.parseInt(om_haxe_ErrorMessage.PATTERN.matched(6))};
			e.content = om_haxe_ErrorMessage.PATTERN.matched(7);
			break;
		case "lines":
			e.lines = { start : Std.parseInt(om_haxe_ErrorMessage.PATTERN.matched(4)), end : Std.parseInt(om_haxe_ErrorMessage.PATTERN.matched(6))};
			e.content = om_haxe_ErrorMessage.PATTERN.matched(7);
			break;
		}
		return e;
	}
	return null;
};
om_haxe_ErrorMessage.prototype = {
	toString: function() {
		var str = "" + this.path + ":" + this.line + ": ";
		if(this.lines != null) {
			str += "lines " + this.lines.start + "-" + this.lines.end;
		} else if(this.character != null) {
			str += "character " + this.character;
		} else if(this.characters != null) {
			str += "characters " + this.characters.start + "-" + this.characters.end;
		}
		str += " : " + this.content;
		return str;
	}
	,toObject: function() {
		return { path : this.path, line : this.line, lines : this.lines, character : this.character, characters : this.characters, content : this.content};
	}
	,__class__: om_haxe_ErrorMessage
};
var om_haxe_SourceCodeUtil = function() { };
om_haxe_SourceCodeUtil.__name__ = ["om","haxe","SourceCodeUtil"];
om_haxe_SourceCodeUtil.extractPackage = function(code) {
	if(!om_haxe_SourceCodeUtil.PACKAGE.match(code)) {
		return null;
	}
	return om_haxe_SourceCodeUtil.PACKAGE.matched(1);
};
om_haxe_SourceCodeUtil.replacePackage = function(code,newPackageName) {
	code = om_haxe_SourceCodeUtil.PACKAGE.map(code,function(reg) {
		return newPackageName;
	});
	return code;
};
var xxx_AutoComplete = function() {
	this.excludeLowerPriority = false;
	this.inclusionPriority = 2;
	this.prefixes = [".","("];
	this.disableForSelector = ".source.haxe .comment, .source.hx .comment";
	this.selector = ".source.haxe, .source.hx";
};
xxx_AutoComplete.__name__ = ["xxx","AutoComplete"];
xxx_AutoComplete.createFieldSuggestions = function(xml) {
	var suggestions = [];
	var e = xml.elements();
	while(e.hasNext()) {
		var e1 = e.next();
		var name = e1.get("n");
		var isVar = e1.get("k") == "var";
		var type = null;
		var doc = null;
		var ret = null;
		var e2 = e1.elements();
		while(e2.hasNext()) {
			var e3 = e2.next();
			if(e3.nodeType != Xml.Document && e3.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + e3.nodeType);
			}
			var fc = e3.children[0];
			if(fc == null) {
				continue;
			}
			if(e3.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + e3.nodeType);
			}
			var _g = e3.nodeName;
			switch(_g) {
			case "d":
				if(fc.nodeType == Xml.Document || fc.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + fc.nodeType);
				}
				doc = fc.nodeValue;
				break;
			case "t":
				if(fc.nodeType == Xml.Document || fc.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + fc.nodeType);
				}
				type = fc.nodeValue;
				break;
			}
		}
		var snippet = name;
		var displayName = name;
		if(isVar) {
			displayName = name + (" : " + type);
		} else {
			var types = type.split(" -> ");
			ret = types.pop();
			if(types[0] == "Void") {
				snippet = name + ("()$" + "0");
				displayName = name + "()";
			} else {
				snippet = name + "( ";
				var i = 1;
				var argSnippets = [];
				var _g1 = 0;
				while(_g1 < types.length) {
					var type1 = types[_g1];
					++_g1;
					var parts = type1.split(" : ");
					var name1 = parts[0];
					argSnippets.push("$" + "{" + i + ":" + name1 + "}");
					++i;
				}
				snippet += argSnippets.join(", ") + (" )$" + "0");
				displayName = name + ("( " + types.join(", ") + " ) : " + ret);
			}
		}
		suggestions.push({ type : isVar?"variable":"method", snippet : snippet, displayText : displayName, description : doc});
	}
	return suggestions;
};
xxx_AutoComplete.prototype = {
	dispose: function() {
	}
	,getSuggestions: function(req) {
		var _gthis = this;
		return new Promise(function(resolve,reject) {
			if(xxx_IDE.hxml == null) {
				resolve(null);
				return;
			}
			var editor = req.editor;
			var bufpos = req.bufferPosition;
			var path = editor.getPath();
			var content = editor.getText();
			var pretext = editor.getTextInBufferRange(new atom_Range(new atom_Point(0,0),new atom_Point(bufpos.row,bufpos.column)));
			var line = editor.lineTextForBufferRow(bufpos.row);
			var index = pretext.length;
			var extraArgs = [];
			extraArgs.push(xxx_IDE.hxml.getPath());
			var _g = req.prefix;
			switch(_g) {
			case "(":
				_gthis.query(path,index,content,null,null,function(xml) {
					var suggestions = [];
					suggestions.push({ type : "method", text : "RRRRRRRRRRRRRRR", displayText : "RRRRRRRRRRRRRRR", snippet : "dddddddddddd$0"});
					resolve(suggestions);
					return;
				},function(err) {
					console.log(err);
				});
				break;
			case ".":
				if(om_haxe_SourceCodeUtil.ENDS_WITH_DOT_NUMBER.match(line)) {
					resolve(null);
					return;
				}
				if(om_haxe_SourceCodeUtil.IMPORT_DECL.match(line)) {
					var pkg = om_haxe_SourceCodeUtil.IMPORT_DECL.matched(1);
					_gthis.query(path,index,content,null,extraArgs,function(xml1) {
						var suggestions1 = [];
						var e = xml1.elements();
						while(e.hasNext()) {
							var e1 = e.next();
							var name = e1.get("n");
							var type = null;
							var doc = null;
							var e2 = e1.elements();
							while(e2.hasNext()) {
								var e3 = e2.next();
								if(e3.nodeType != Xml.Document && e3.nodeType != Xml.Element) {
									throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + e3.nodeType);
								}
								var fc = e3.children[0];
								if(fc == null) {
									continue;
								}
								if(e3.nodeType != Xml.Element) {
									throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + e3.nodeType);
								}
								var _g1 = e3.nodeName;
								switch(_g1) {
								case "d":
									if(fc.nodeType == Xml.Document || fc.nodeType == Xml.Element) {
										throw new js__$Boot_HaxeError("Bad node type, unexpected " + fc.nodeType);
									}
									doc = fc.nodeValue;
									break;
								case "t":
									if(fc.nodeType == Xml.Document || fc.nodeType == Xml.Element) {
										throw new js__$Boot_HaxeError("Bad node type, unexpected " + fc.nodeType);
									}
									type = fc.nodeValue;
									break;
								}
							}
							var sug = { text : name, description : doc};
							var _g2 = e1.get("k");
							switch(_g2) {
							case "method":
								sug.type = "method";
								sug.displayText = name;
								var types = type.split(" -> ");
								var ret = types.pop();
								if(types[0] == "Void") {
									sug.displayText += "() : " + ret;
								} else {
									var i = 1;
									var argSnippets = [];
									var _g3 = 0;
									while(_g3 < types.length) {
										var type1 = types[_g3];
										++_g3;
										var parts = type1.split(" : ");
										var name1 = parts[0];
										argSnippets.push("$" + "{" + i + ":" + name1 + "}");
										++i;
									}
									argSnippets.join(", ");
									sug.displayText += "( " + types.join(", ") + " ) : " + ret;
								}
								break;
							case "package":
								sug.iconHTML = "<i class=\"icon-package\"></i>";
								sug.displayText = pkg + "." + sug.text;
								break;
							case "type":
								sug.type = "type";
								sug.displayText = pkg + "." + name;
								break;
							case "var":
								sug.type = "variable";
								sug.displayText = name + " : " + type;
								break;
							}
							suggestions1.push(sug);
						}
						resolve(suggestions1);
						return;
					},function(err1) {
						console.log(err1);
						resolve(null);
						return;
					});
				} else {
					_gthis.query(path,index,content,null,extraArgs,function(xml2) {
						var tmp = xxx_AutoComplete.createFieldSuggestions(xml2);
						resolve(tmp);
						return;
					},function(err2) {
						console.log(err2);
					});
				}
				break;
			default:
				resolve(null);
				return;
			}
		});
	}
	,query: function(file,index,content,mode,extraArgs,onResult,onError) {
		if(index == null) {
			index = 0;
		}
		var haxePos = "" + file + "@" + index;
		if(mode != null) {
			haxePos += "@" + mode;
		}
		var args = ["--display",haxePos];
		if(extraArgs != null) {
			args = extraArgs.concat(args);
		}
		xxx_IDE.server.query(args,content,function(msg) {
		},function(result) {
			var xml = Xml.parse(result).firstElement();
			onResult(xml);
		},function(e) {
			onError(e);
		});
	}
	,__class__: xxx_AutoComplete
};
var xxx_Build = function(haxePath,hxml) {
	if(haxePath == null) {
		haxePath = "haxe";
	}
	atom_Emitter.call(this);
	this.haxePath = haxePath;
	this.hxml = hxml;
};
xxx_Build.__name__ = ["xxx","Build"];
xxx_Build.__super__ = atom_Emitter;
xxx_Build.prototype = $extend(atom_Emitter.prototype,{
	onStart: function(h) {
		return this.on("start",h);
	}
	,onMessage: function(h) {
		return this.on("message",h);
	}
	,onError: function(h) {
		return this.on("error",h);
	}
	,onEnd: function(h) {
		return this.on("end",h);
	}
	,start: function(verbose) {
		if(verbose == null) {
			verbose = false;
		}
		var _gthis = this;
		var cwd = this.hxml.getParent().getPath();
		var args = ["--cwd",cwd];
		if(verbose) {
			args.push("-v");
		}
		args.push(this.hxml.getBaseName());
		if(xxx_IDE.server.proc != null) {
			xxx_IDE.server.query(args,null,function(msg) {
				console.log(msg);
				_gthis.emit("message",msg);
			},function(res) {
				console.log(res);
				_gthis.emit("end",0);
			},function(err) {
				console.log(err);
				var str = StringTools.trim(err);
				var err1 = om_haxe_ErrorMessage.parse(str);
				_gthis.emit("error",err1);
				_gthis.emit("end");
			});
			this.emit("start");
		}
	}
	,__class__: xxx_Build
});
var xxx_HaxeServer = function(haxePath,verbose) {
	if(verbose == null) {
		verbose = true;
	}
	if(haxePath == null) {
		haxePath = "haxe";
	}
	this.haxePath = haxePath;
	this.verbose = verbose;
};
xxx_HaxeServer.__name__ = ["xxx","HaxeServer"];
xxx_HaxeServer.prototype = {
	isActive: function() {
		return this.proc != null;
	}
	,start: function() {
		this.stop();
		this.buffer = new xxx__$HaxeServer_MessageBuffer();
		this.nextMessageLength = -1;
		var args = ["-v","--wait","stdio"];
		this.proc = js_node_ChildProcess.spawn(this.haxePath,args);
		this.proc.on("exit",$bind(this,this.handleExit));
		this.proc.stderr.on("data",$bind(this,this.handleData));
		this.proc.stdout.on("data",function(buf) {
			window.console.debug("%c" + buf.toString(),"color:#F68712;");
		});
	}
	,stop: function() {
		if(this.proc != null) {
			this.proc.removeAllListeners();
			this.proc.kill();
			this.proc = null;
		}
		var req = this.requestsHead;
		while(req != null) {
			req.processResult(null);
			req = req.next;
		}
		this.requestsHead = this.requestsTail = this.currentRequest = null;
	}
	,query: function(args,stdin,onMessage,onResult,onError) {
		console.log("### " + Std.string(args));
		var req = new xxx__$HaxeServer_Request(args,stdin,onMessage,onResult,onError);
		if(this.requestsHead == null) {
			this.requestsHead = this.requestsTail = req;
		} else {
			this.requestsTail.next = req;
			req.prev = this.requestsTail;
			this.requestsTail = req;
		}
		this.checkQueue();
	}
	,checkQueue: function() {
		if(this.currentRequest != null) {
			return;
		}
		if(this.requestsHead != null) {
			this.currentRequest = this.requestsHead;
			this.requestsHead = this.currentRequest.next;
			this.proc.stdin.write(this.currentRequest.prepareBody());
		}
	}
	,handleData: function(buf) {
		this.buffer.append(buf);
		while(true) {
			if(this.nextMessageLength == -1) {
				var length = this.buffer.tryReadLength();
				if(length == -1) {
					return;
				}
				this.nextMessageLength = length;
			}
			var msg = this.buffer.tryReadContent(this.nextMessageLength);
			if(msg == null) {
				return;
			}
			this.nextMessageLength = -1;
			if(this.currentRequest != null) {
				var request = this.currentRequest;
				this.currentRequest = null;
				request.processResult(msg);
				this.checkQueue();
			}
		}
	}
	,handleExit: function(a,b) {
		console.log("Haxe process was killed");
		console.log(a);
		console.log(b);
	}
	,__class__: xxx_HaxeServer
};
var xxx__$HaxeServer_MessageBuffer = function(size) {
	if(size == null) {
		size = 8192;
	}
	this.size = size;
	this.buffer = new js_node_buffer_Buffer(size);
	this.index = 0;
};
xxx__$HaxeServer_MessageBuffer.__name__ = ["xxx","_HaxeServer","MessageBuffer"];
xxx__$HaxeServer_MessageBuffer.prototype = {
	append: function(chunk) {
		if(this.buffer.length - this.index >= chunk.length) {
			chunk.copy(this.buffer,this.index,0,chunk.length);
		} else {
			var nsize = (Math.ceil((this.index + chunk.length) / this.size) + 1) * this.size;
			if(this.index == 0) {
				this.buffer = new js_node_buffer_Buffer(nsize);
				chunk.copy(this.buffer,0,0,chunk.length);
			} else {
				this.buffer = js_node_buffer_Buffer.concat([this.buffer.slice(0,this.index),chunk],nsize);
			}
		}
		this.index += chunk.length;
	}
	,tryReadLength: function() {
		if(this.index < 4) {
			return -1;
		}
		var len = this.buffer.readInt32LE(0);
		this.buffer = this.buffer.slice(4);
		this.index -= 4;
		return len;
	}
	,tryReadContent: function(length) {
		if(this.index < length) {
			return null;
		}
		var res = this.buffer.toString("utf-8",0,length);
		this.buffer.copy(this.buffer,0,length);
		this.index -= length;
		return res;
	}
	,__class__: xxx__$HaxeServer_MessageBuffer
};
var xxx__$HaxeServer_Request = function(args,stdin,onMessage,onResult,onError) {
	this.args = args;
	this.stdin = stdin;
	this.onMessage = onMessage;
	this.onResult = onResult;
	this.onError = onError;
};
xxx__$HaxeServer_Request.__name__ = ["xxx","_HaxeServer","Request"];
xxx__$HaxeServer_Request.prototype = {
	prepareBody: function() {
		if(this.stdin != null) {
			this.args = this.args.concat(["-D","display-stdin"]);
		}
		var lbuf = new js_node_buffer_Buffer(4);
		var chunks = [lbuf];
		var length = 0;
		var _g = 0;
		var _g1 = this.args;
		while(_g < _g1.length) {
			var arg = _g1[_g];
			++_g;
			var buf = new js_node_buffer_Buffer("" + arg + "\n");
			chunks.push(buf);
			length += buf.length;
		}
		if(this.stdin != null) {
			var sbuf = new js_node_buffer_Buffer([1]);
			chunks.push(sbuf);
			var buf1 = new js_node_buffer_Buffer(this.stdin);
			chunks.push(buf1);
			length += buf1.length + sbuf.length;
		}
		lbuf.writeInt32LE(length,0);
		return js_node_buffer_Buffer.concat(chunks,length + 4);
	}
	,processResult: function(data) {
		if(data == null) {
			this.onResult(null);
			return;
		}
		var buf_b = "";
		var hasError = false;
		var _g = 0;
		var _g1 = data.split("\n");
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			var _g2 = line.charCodeAt(0);
			switch(_g2) {
			case 1:
				var line1 = StringTools.replace(line.substring(1),"\x01","\n");
				this.onMessage(line1);
				break;
			case 2:
				hasError = true;
				break;
			default:
				buf_b += line == null?"null":"" + line;
				buf_b += "\n";
			}
		}
		var data1 = StringTools.trim(buf_b);
		if(hasError) {
			this.onError(data1);
		} else {
			this.onResult(data1);
		}
	}
	,__class__: xxx__$HaxeServer_Request
};
var xxx_IDE = $hx_exports["xxx"]["IDE"] = function() { };
xxx_IDE.__name__ = ["xxx","IDE"];
xxx_IDE.activate = function(state) {
	console.log("Atom-xxx");
	xxx_IDE.disposables = new atom_CompositeDisposable();
	xxx_IDE.emitter = new atom_Emitter();
	xxx_IDE.server = new xxx_HaxeServer();
	xxx_IDE.searchHxmlFiles(null,null,function(found) {
		console.log(found.length + " hxml files found");
		xxx_IDE.hxmlFiles = found;
		if(state != null && state.hxml != null) {
			if(xxx_IDE.hxmlFiles.indexOf(state.hxml) != -1) {
				xxx_IDE.selectHxml(state.hxml);
			}
		} else {
			xxx_IDE.selectHxml(found[0]);
		}
		xxx_IDE.server.start();
		xxx_IDE.disposables.add(atom.commands.add("atom-workspace","xxx:build",function(e) {
			var treeViewFile = xxx_IDE.getTreeViewFile();
			if(treeViewFile != null && haxe_io_Path.extension(treeViewFile) == "hxml") {
				if(xxx_IDE.hxml != null && treeViewFile != xxx_IDE.hxml.getPath()) {
					xxx_IDE.selectHxml(treeViewFile);
				}
			}
			xxx_IDE.build();
		}));
	});
};
xxx_IDE.serialize = function() {
	return { hxml : xxx_IDE.hxml != null?xxx_IDE.hxml.getPath():null};
};
xxx_IDE.deactivate = function() {
	xxx_IDE.disposables.dispose();
	xxx_IDE.server.stop();
};
xxx_IDE.onSelectHxml = function(h) {
	return xxx_IDE.emitter.on("select_hxml",h);
};
xxx_IDE.onBuild = function(h) {
	return xxx_IDE.emitter.on("build",h);
};
xxx_IDE.selectHxml = function(path) {
	if(path == null) {
		xxx_IDE.hxml = null;
	} else {
		if(xxx_IDE.hxml != null && path == xxx_IDE.hxml.getPath()) {
			return;
		}
		xxx_IDE.hxml = new atom_File(path);
	}
	xxx_IDE.emitter.emit("select_hxml",xxx_IDE.hxml);
};
xxx_IDE.build = function() {
	var build = new xxx_Build(null,xxx_IDE.hxml);
	new xxx_view_BuildView(build);
	xxx_IDE.emitter.emit("build",build);
	build.start();
};
xxx_IDE.searchHxmlFiles = function(paths,maxDepth,callback) {
	if(maxDepth == null) {
		maxDepth = 5;
	}
	if(paths == null) {
		paths = atom.project.getPaths();
	}
	var walk = function(dir,callback1,depth) {
		if(depth == null) {
			depth = 0;
		}
		var results = [];
		js_node_Fs.readdir(dir,function(err,list) {
			var pending = list.length;
			if(pending == 0) {
				callback1(results);
				return;
			}
			var _g = 0;
			while(_g < list.length) {
				var file = [list[_g]];
				++_g;
				var walk1 = js_node_Path.resolve(dir,file[0]);
				file[0] = walk1;
				js_node_Fs.stat(file[0],(function(file1) {
					return function(err1,stat) {
						if(stat != null && stat.isDirectory()) {
							if(depth < maxDepth) {
								var file2 = file1[0];
								var walk2 = (function() {
									return function(res) {
										results = results.concat(res);
										if((pending -= 1) == 0) {
											callback1(results);
										}
									};
								})();
								walk(file2,walk2,depth + 1);
							} else if((pending -= 1) == 0) {
								callback1(results);
							}
						} else {
							if(haxe_io_Path.extension(file1[0]) == "hxml") {
								results.push(file1[0]);
							}
							if((pending -= 1) == 0) {
								callback1(results);
							}
						}
					};
				})(file));
			}
		});
	};
	var found = [];
	var pathsSearched = 0;
	var _g1 = 0;
	while(_g1 < paths.length) {
		var path = paths[_g1];
		++_g1;
		walk(path,function(list1) {
			found = found.concat(list1);
			if((pathsSearched += 1) == paths.length) {
				callback(found);
			}
		});
	}
};
xxx_IDE.getTreeViewFile = function(ext) {
	var path = atom.packages.getLoadedPackage("tree-view").serialize().selectedPath;
	if(ext == null || path != null && haxe_io_Path.extension(path) == ext) {
		return path;
	} else {
		return null;
	}
};
xxx_IDE.getConfig = function(id) {
	return atom.config.get("xxx." + id);
};
xxx_IDE.consumeStatusBar = function(bar) {
	bar.addLeftTile({ item : new xxx_view_StatusbarView().element, priority : -100});
};
xxx_IDE.provideAutoCompletion = function() {
	return new xxx_AutoComplete();
};
xxx_IDE.provideService = function() {
	return null;
};
var xxx_view__$BuildView_ErrorMessageView = function(n,err) {
	this.error = err;
	this.element = window.document.createElement("li");
	this.element.classList.add("message","error");
	var index = window.document.createElement("i");
	index.textContent = Std.string(n + 1);
	this.element.appendChild(index);
	var path = window.document.createElement("span");
	path.classList.add("path");
	path.textContent = err.path;
	this.element.appendChild(path);
	var line = window.document.createElement("span");
	line.classList.add("line");
	line.textContent = err.line == null?"null":"" + err.line;
	this.element.appendChild(line);
	if(err.characters != null) {
		var start = window.document.createElement("span");
		start.classList.add("start");
		start.textContent = Std.string(err.characters.start);
		this.element.appendChild(start);
		var end = window.document.createElement("span");
		end.classList.add("end");
		end.textContent = Std.string(err.characters.end);
		this.element.appendChild(end);
	}
	var content = window.document.createElement("span");
	content.classList.add("content");
	content.textContent = err.content;
	this.element.appendChild(content);
};
xxx_view__$BuildView_ErrorMessageView.__name__ = ["xxx","view","_BuildView","ErrorMessageView"];
xxx_view__$BuildView_ErrorMessageView.prototype = {
	select: function() {
		this.element.classList.add("selected");
	}
	,unselect: function() {
		this.element.classList.remove("selected");
	}
	,__class__: xxx_view__$BuildView_ErrorMessageView
};
var xxx_view_BuildView = function(build) {
	var _gthis = this;
	if(xxx_view_BuildView.current != null) {
		xxx_view_BuildView.current.destroy();
	}
	xxx_view_BuildView.current = this;
	this.element = window.document.createElement("div");
	this.element.classList.add("xxx-build","resizer");
	this.messages = window.document.createElement("ol");
	this.messages.classList.add("messages","scroller");
	this.element.appendChild(this.messages);
	this.panel = atom.workspace.addBottomPanel({ item : this.element, visible : true});
	var errors = [];
	build.on("start",function() {
		errors = [];
	});
	build.on("message",function(msg) {
		console.log(msg);
		var e = window.document.createElement("li");
		e.classList.add("message");
		e.textContent = msg;
		_gthis.messages.appendChild(e);
	});
	build.on("error",function(err) {
		errors.push(err);
		var view = new xxx_view__$BuildView_ErrorMessageView(_gthis.messages.children.length,err);
		view.element.onclick = function() {
			view.select();
			xxx_view_BuildView.openErrorPosition(err);
		};
		_gthis.messages.appendChild(view.element);
	});
	build.on("end",function(code) {
		if(code == 0) {
			if(_gthis.messages.children.length == 0) {
				_gthis.panel.hide();
			}
		} else if(errors.length > 0) {
			var err1 = errors[0];
			new atom_File(err1.path);
			var rel = atom.project.relativizePath(build.hxml.getPath());
			console.log(rel.toString());
		}
	});
};
xxx_view_BuildView.__name__ = ["xxx","view","BuildView"];
xxx_view_BuildView.openPosition = function(path,line,column,activatePane,searchAllPanes,callback) {
	if(searchAllPanes == null) {
		searchAllPanes = true;
	}
	if(activatePane == null) {
		activatePane = true;
	}
	atom.workspace.open(path,{ initialLine : line, initialColumn : column, activatePane : activatePane, searchAllPanes : searchAllPanes}).then(function(editor) {
		if(callback != null) {
			callback(editor);
		}
	});
};
xxx_view_BuildView.openErrorPosition = function(err) {
	var line = err.line - 1;
	xxx_view_BuildView.openPosition(err.path,line,err.character,null,null,function(editor) {
		if(err.characters != null) {
			editor.setSelectedBufferRange(new atom_Range([line,err.characters.start],[line,err.characters.end]));
		}
		editor.scrollToCursorPosition();
	});
};
xxx_view_BuildView.prototype = {
	isVisible: function() {
		return this.panel.isVisible();
	}
	,show: function() {
		this.panel.show();
	}
	,hide: function() {
		this.panel.hide();
	}
	,toggle: function() {
		if(this.panel.isVisible()) {
			this.panel.hide();
		} else {
			this.panel.show();
		}
	}
	,destroy: function() {
		this.panel.destroy();
	}
	,__class__: xxx_view_BuildView
};
var xxx_view_StatusbarView = function() {
	var _gthis = this;
	this.element = window.document.createElement("div");
	this.element.classList.add("status-bar-xxx","inline-block");
	this.icon = window.document.createElement("span");
	this.icon.classList.add("icon-haxe");
	this.element.appendChild(this.icon);
	this.info = window.document.createElement("a");
	this.info.classList.add("info");
	this.element.appendChild(this.info);
	this.meta = window.document.createElement("span");
	this.meta.classList.add("meta");
	this.element.appendChild(this.meta);
	xxx_IDE.emitter.on("select_hxml",function(hxml) {
		_gthis.changeHxml(hxml);
	});
	xxx_IDE.emitter.on("build",function(build) {
		var timeBuildStart = null;
		var numErrors = 0;
		build.on("start",function() {
			var t = process.hrtime();
			timeBuildStart = (t[0] * 1e9 + t[1]) / 1e6;
			_gthis.changeStatus("active");
		});
		build.on("message",function(msg) {
		});
		build.on("error",function(err) {
			numErrors += 1;
			_gthis.changeStatus("error");
		});
		build.on("end",function(code) {
			if(code == 0) {
				_gthis.changeStatus("success");
				var t1 = process.hrtime();
				var time = ((t1[0] * 1e9 + t1[1]) / 1e6 - timeBuildStart) / 1000;
				var timeStr = time == null?"null":"" + time;
				var cpos = timeStr.indexOf(".");
				var tmp = timeStr.substring(0,cpos) + timeStr.substring(cpos,3);
				_gthis.meta.textContent = tmp + "s";
			} else {
				_gthis.changeStatus("error");
				_gthis.meta.textContent = "(" + numErrors + ")";
			}
		});
	});
};
xxx_view_StatusbarView.__name__ = ["xxx","view","StatusbarView"];
xxx_view_StatusbarView.__interfaces__ = [atom_Disposable];
xxx_view_StatusbarView.prototype = {
	changeHxml: function(hxml) {
		if(hxml == null) {
			this.icon.style.display = "none";
			this.info.textContent = this.meta.textContent = "";
			if(this.contextMenu != null) {
				this.contextMenu.dispose();
			}
		} else {
			this.icon.style.display = "inline-block";
			hxml.getPath();
			var parts = atom.project.relativizePath(hxml.getPath());
			if(parts[0] != null) {
				var projectParts = parts[0].split("/");
				var str = projectParts[projectParts.length - 1] + "/" + parts[1];
				this.info.textContent = haxe_io_Path.withoutExtension(str);
			}
			this.meta.textContent = "";
			this.contextMenu = atom.contextMenu.add({ '.status-bar-xxx .info' : [{ label : "Build", command : "haxe:build"}]});
		}
	}
	,changeStatus: function(status) {
		if(status != this.status) {
			if(this.status != null) {
				this.icon.classList.remove(this.status);
				this.info.classList.remove(this.status);
			}
			this.status = status;
			if(status != null) {
				this.icon.classList.add(status);
				this.info.classList.add(status);
			}
		}
	}
	,dispose: function() {
		this.info.removeEventListener("click",$bind(this,this.handleClickInfo));
		if(this.contextMenu != null) {
			this.contextMenu.dispose();
		}
	}
	,handleClickInfo: function(e) {
	}
	,__class__: xxx_view_StatusbarView
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
var __map_reserved = {}
module.exports = xxx_IDE;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved["lt"] != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved["gt"] != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved["amp"] != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved["quot"] != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved["apos"] != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
js_Boot.__toStr = ({ }).toString;
om__$Time_Time_$Impl_$.startTime = (function($this) {
	var $r;
	var t = process.hrtime();
	$r = t[0] * 1e9 + t[1];
	return $r;
}(this));
om_haxe_ErrorMessage.PATTERN = new EReg("^\\s*(.+):([0-9]+):\\s*(characters*|lines)\\s([0-9]+)(-([0-9]+))?\\s:\\s(.+)$","i");
om_haxe_SourceCodeUtil.ENDS_WITH_DOT_IDENTIFIER = new EReg("\\.([a-zA-Z_0-9]*)$","");
om_haxe_SourceCodeUtil.ENDS_WITH_DOT_NUMBER = new EReg("[^a-zA-Z0-9_\\]\\)]([\\.0-9]+)$","");
om_haxe_SourceCodeUtil.ENDS_WITH_PARTIAL_PACKAGE_DECL = new EReg("[^a-zA-Z0-9_]package\\s+([a-zA-Z_0-9]+(\\.[a-zA-Z_0-9]+)*)\\.([a-zA-Z_0-9]*)$","");
om_haxe_SourceCodeUtil.ENDS_WITH_ALPHANUMERIC = new EReg("([A-Za-z0-9_]+)$","");
om_haxe_SourceCodeUtil.PACKAGE = new EReg("^package\\s*([a-zA-Z0-9_]*(\\.[a-zA-Z0-9_]+)*)","");
om_haxe_SourceCodeUtil.IMPORT_DECL = new EReg("import\\s*([a-zA-Z0-9_]+(?:\\.[a-zA-Z0-9_]+)*)(?:\\s+(?:in|as)\\s+([a-zA-Z0-9_]+))?","g");
xxx_Build.EVENT_START = "start";
xxx_Build.EVENT_MESSAGE = "message";
xxx_Build.EVENT_ERROR = "error";
xxx_Build.EVENT_END = "end";
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=xxx.js.map